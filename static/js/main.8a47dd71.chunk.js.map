{"version":3,"sources":["logic/winningLineMaps.js","logic/lowLevelHelpers.js","logic/connectFourLogic.js","GameBoard.js","modals/WelcomeModal.js","modals/InGameMenu.js","modals/SettingsModal.js","modals/MathQuestionModal.js","logic/questionGenerators/combiningGenerator.js","logic/questionGenerators/multiplyingGenerator.js","logic/questionGenerators/questionGenerator.js","logic/getBotMove.js","theme.js","App.js","hooks.js","reportWebVitals.js","index.js"],"names":["lineToCellsMap","console","warn","map","Map","currentLineId","cell","cellsPerCol","isStartOfVerticalLine","line","verticalLineByStartCell","set","isStartOfHorizontalLine","horizontalLineByStartCell","cellId","upslashLineByStartCell","isStartOfDownslashLine","downslashLineByStartCell","log","size","entries","generateLineToCellsMap","numberOfLines","cellToLinesMap","lineId","get","forEach","prevLinesList","concat","generateCellToLinesMap","getRowByCellId","isEndOfVerticalLine","id","Math","floor","chooseRandomFromArray","array","randomInt","length","min","max","ceil","random","intersect","setOne","setTwo","filter","item","includes","gameIsOver","gameStatus","playerOnesMoves","moveList","turn","playerTwosMoves","getColumnData","columnIndex","data","Array","fill","move","player","getBoardData","claimStatus","getLowestUnclaimedCell","lowestUnclaimedRow","indexOf","nextPlayerColor","getGameStatus","lastPlayerToMove","lastPlayersMoves","lastMoveMade","Number","slice","linesAffectedByLastMove","i","cellIsUnclaimed","squarePercentage","heightOfSixSquares","chipSizeRelativeToSquare","rowNumbers","columnNumbers","GameBoard","props","handleColumnClick","getColumnChipColors","chipColors","turnNumber","boardChipColors","Container","disableGutters","sx","position","top","height","width","display","flexDirection","alignItems","InfoHeaderRow","Column","index","RoundedBoardFrame","message","Box","left","zIndex","justifyContent","Zoom","in","style","transitionDelay","Typography","variant","align","boxSizing","border","borderColor","borderRadius","borderTop","columnLetter","onClick","backgroundColor","HoverChipArea","ChipContainer","ColumnOfSquaresWithHoles","Chip","color","claimed","bgcolor","Slide","direction","fontSize","SquareWithHole","overflow","boxShadow","Transition","React","forwardRef","ref","WelcomeModal","open","boardSideLength","openSettingsModal","Dialog","TransitionComponent","fullWidth","maxWidth","PaperProps","minHeight","minWidth","justifySelf","alignSelf","px","py","overflowY","PlayNowButton","gutterBottom","pt","m","Button","children","InGameMenu","openInGameMenu","handleNewGameClick","handleUndoClick","anchorEl","setAnchorEl","closeMenu","undefined","event","currentTarget","right","padding","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Menu","elevation","mt","ml","mr","content","transform","MenuItem","NewGameButton","handleClick","UndoButton","startIcon","SettingsModal","startNewGame","cancelNewGame","opponent","mathTopics","difficultyMode","toggleCombine","toggleMultiply","selectOpponent","selectDifficulty","noneSelectedError","Object","values","v","OpponentSelector","MathTopicSelector","DifficultyModeSelector","StartAndCancelButtons","Grid","container","spacing","p","xs","PlayVsHumanButton","PlayVsBotButton","IconButton","icon","faUserFriends","faRobot","CombineButton","MultiplyButton","selected","combine","multiply","DifficultyModeButton","mode","mb","pr","CancelButton","StartGameButton","disabled","MathQuestionModal","question","headerText","handleAnswerSubmit","correctAnswer","equationString","inputType","disableEscapeKeyDown","onBackdropClick","margin","HeaderText","QuestionEquation","AnswerInputComponent","flexFlow","fontStyle","useState","playersAnswer","setPlayersAnswer","answerIsNum","test","error","handlePlayersAnswerChange","updatedAnswer","target","value","trim","NumericalTextInput","handleSubmitButtonClick","CompareButtons","FormControl","InputLabel","OutlinedInput","label","autoFocus","autoComplete","type","pattern","onChange","inputProps","onKeyDown","key","SubmitButton","lineHeight","missingMinuendInstructions","missingSumInstructions","missingDifferenceInstructions","missingAddendInstructions","howFarApartInstructions","missingSumTwo","difficulty","vars","a","b","c","instructions","missingSumThree","d","missingDifference","missingAddendTwo","missingAddendThree","howFarApart","abs","doubleTripleQuadruple","dtqInstructions","missingMinuend","mediumFactor","missingProductInstructions","missingFactorInstructions","missingDivisorInstructions","missingQuotientInstructions","missingProductTwo","missingProductThree","missingFactorTwo","missingFactorThree","missingDivisor","missingQuotient","halfThirdQuarter","generatorFuntions","assert","getBotMove","wins","botsMoves","cellsInLine","getWinningMovesForBot","blocks","threats","humansMoves","getDefensiveMovesForBot","legalMoves","moves","col","push","getLegalMoves","winningMoves","blockingMoves","theme","createTheme","palette","primary","light","main","dark","contrastText","secondary","text","hint","action","disabledBackground","disabledOpacity","board","chip","playerOne","playerTwo","unclaimed","background","white","transparent","selectedButton","unselectedButton","components","MuiPaper","styleOverrides","root","typography","h1","h2","h3","button","fontWeight","status","shape","transitions","easing","bounce","parabolicAcceleration","responsiveFontSizes","factor","App","setOpponent","setMathTopics","setDifficultyMode","setMoveList","setGameStatus","openModal","setOpenModal","activeCell","setActiveCell","testQuestion","setQuestion","setHeaderText","waysToSayCorrect","window","innerHeight","screenHeight","setScreenHeight","useEffect","handleScreenSizeChange","addEventListener","removeEventListener","useScreenHeight","innerWidth","screenWidth","setScreenWidth","useScreenWidth","Fragment","CssBaseline","ThemeProvider","shortenedMoveList","JSON","stringify","prev","answerIsCorrect","answerFeedbackHeaderText","moveToAdd","updatedMoveList","updatedGameStatus","setTimeout","botMove","moveListAfterBot","gameStatusAfterBot","lowestUnclaimedCell","score","nextPlayersMoves","determineDifficulty","mathTopicsArray","entry","topic","Promise","resolve","reject","generateQuestion","then","newQuestion","openMathQuestionModal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a47dd71.chunk.js","sourcesContent":["// A \"line\" is a set of four cellIds that together form a win.\r\n// There are four 'types' of Line: 'vertical', 'horizontal', 'upslash', 'downslash'\r\n// There are 64 lines and 42 cells. \r\n// This module exports two high-level constants that map these two types of id to one another.\r\n// 1) lineIdToCellIdsMap  could be renamed \"cellsInLine\". It takes a lineId 0-63 and gives back the four cells in it.\r\n// 2) cellIdToLineIdsMap  could be renamed \"linesThatIncludeCell\". It takes a cellId 0-41 and gives back the 3 to 13 lines that cell is part of.\r\n\r\n// Low-level Constants\r\nconst cellsPerCol = 6;\r\nconst cellsPerRow = 7;\r\nconst totalCells = cellsPerCol * cellsPerRow;\r\n// const linesPerCol = (cellsPerCol >= 4) ? (cellsPerCol - 3) : 0;\r\n// const linesPerRow = (cellsPerRow >= 4) ? (cellsPerRow - 3) : 0;\r\n// const numberOfVerticalLines = linesPerCol * cellsPerRow;\r\n// const numberOfHorizontalLines = linesPerRow * cellsPerCol;\r\n// const numberOfUpslashLines = linesPerCol * linesPerRow;\r\n// const numberOfDownslashLines = linesPerCol * linesPerRow;\r\n\r\n\r\nexport const lineToCellsMap = generateLineToCellsMap()\r\nexport const numberOfLines = lineToCellsMap.size\r\nexport const cellToLinesMap = generateCellToLinesMap()\r\n\r\n\r\nfunction generateLineToCellsMap() {\r\n    console.warn(`generateLineToCellsMap was called.  This compute heavy function should only run once per game.`)\r\n    let map = new Map()\r\n    let currentLineId = 0\r\n    for (let cell = 0; cell < totalCells; cell++) {\r\n        if (isStartOfVerticalLine(cell)) {\r\n            let line = verticalLineByStartCell(cell)\r\n            map.set(currentLineId++, line)\r\n        }\r\n        if (isStartOfHorizontalLine(cell)) {\r\n            let line = horizontalLineByStartCell(cell)\r\n            map.set(currentLineId++, line)\r\n        }\r\n        if (isStartOfUpslashLine(cell)) {\r\n            let line = upslashLineByStartCell(cell)\r\n            map.set(currentLineId++, line)\r\n        }\r\n        if (isStartOfDownslashLine(cell)) {\r\n            let line = downslashLineByStartCell(cell)\r\n            map.set(currentLineId++, line)\r\n        }\r\n    }\r\n    console.log(`Mapped each of the ${map.size} LineIds to the set of Cells in it.`)\r\n    console.log([...map.entries()])\r\n    return map\r\n}\r\nfunction verticalLineByStartCell(cellId) {\r\n    let line = [\r\n        cellId + (0 * cellsPerRow),\r\n        cellId + (1 * cellsPerRow),\r\n        cellId + (2 * cellsPerRow),\r\n        cellId + (3 * cellsPerRow)\r\n    ]\r\n    return line\r\n}\r\nfunction horizontalLineByStartCell(cellId) {\r\n    let line = [\r\n        cellId + 0,\r\n        cellId + 1,\r\n        cellId + 2,\r\n        cellId + 3\r\n    ]\r\n    return line\r\n}\r\nfunction upslashLineByStartCell(cellId) {\r\n    let line = [\r\n        cellId + (0 * cellsPerRow) + 0,\r\n        cellId + (1 * cellsPerRow) + 1,\r\n        cellId + (2 * cellsPerRow) + 2,\r\n        cellId + (3 * cellsPerRow) + 3\r\n    ]\r\n    return line\r\n}\r\nfunction downslashLineByStartCell(cellId) {\r\n    let line = [\r\n        cellId - (0 * cellsPerRow) + 0,\r\n        cellId - (1 * cellsPerRow) + 1,\r\n        cellId - (2 * cellsPerRow) + 2,\r\n        cellId - (3 * cellsPerRow) + 3\r\n    ]\r\n    return line\r\n}\r\n\r\n\r\n\r\nfunction generateCellToLinesMap() {\r\n    console.warn(`cellToLinesMap was called.  This is a compute heavy function which should run once per game.`)\r\n    let cellToLinesMap = new Map()\r\n    for (let cell = 0; cell < totalCells; cell++) {\r\n        cellToLinesMap.set(cell, [])\r\n    }\r\n    for (let lineId = 0; lineId < numberOfLines; lineId++) {\r\n        let cellsInLine = lineToCellsMap.get(lineId)\r\n        cellsInLine.forEach(cell => {\r\n            let prevLinesList = cellToLinesMap.get(cell)\r\n            cellToLinesMap.set(cell, prevLinesList.concat(lineId))\r\n        })\r\n    }\r\n    console.log(`Mapped each of the ${totalCells} CellIds to the set of all Lines that include it.`)\r\n    console.log([...cellToLinesMap.entries()])\r\n\r\n    // cellsToLinesMap.forEach(logMapElement);\r\n    return cellToLinesMap\r\n}\r\n\r\n// FIRST level BOOLEAN LINE helpers             // Currently there is only a Cell.js functional Component, however if I defined a Cell Class I would think that I could turn these functions that take cellId as a parameter and turn them into something that 'reads better' like Cell.isStartOfVerticalLine() written on the Cell object so that it has built in access to the relevant cellId and can be used in a no-parameter fashion. ??? \r\nfunction isStartOfVerticalLine(cellId) {\r\n    const rowNumber = getRowByCellId(cellId)\r\n    return (cellsPerCol - rowNumber >= 4)\r\n}\r\nfunction isEndOfVerticalLine(cellId) {\r\n    const rowNumber = getRowByCellId(cellId)\r\n    return (rowNumber >= 3)\r\n}\r\nfunction isStartOfHorizontalLine(cellId) {\r\n    // If we are in the 0-th row then the minimum cellsPerCol that should return true is 4\r\n    const colNumber = getColByCellId(cellId)\r\n    return (cellsPerRow - colNumber >= 4)\r\n}\r\nfunction isStartOfUpslashLine(cellId) {\r\n    // A cell is the Start Of an Upslash Line IFF it is BOTH the \"start\" of a vertical line AND the \"start\" of a horizontal line.  \r\n    return (isStartOfVerticalLine(cellId) && isStartOfHorizontalLine(cellId));\r\n}\r\nfunction isStartOfDownslashLine(cellId) {\r\n    // A cell is the Start Of an Downslash Line IFF it is BOTH the \"end\" of a vertical line AND the \"start\" of a horizontal line.  \r\n    return (isEndOfVerticalLine(cellId) && isStartOfHorizontalLine(cellId));\r\n}\r\n\r\n// LOWEST LEVEL CELL-ROW-COL HELPERS\r\nfunction getRowByCellId(id) {\r\n    return (Math.floor(id / cellsPerRow))\r\n}\r\nfunction getColByCellId(id) {\r\n    return (id % cellsPerRow)\r\n}\r\nfunction getCellIdByRowCol(row, col) {\r\n    return (row * cellsPerRow + col);\r\n}\r\n\r\n","\r\n\r\nexport function chooseRandomFromArray(array) {\r\n    let randomIndex = randomInt(0, array.length)\r\n    let choice = array[randomIndex]\r\n    // console.log(`CHOICE: ${choice}`);\r\n    return choice\r\n}\r\n\r\nexport function randomInt(min, max) { //The maximum is exclusive and the minimum is inclusive\r\n    min = Math.ceil(min)\r\n    max = Math.floor(max)\r\n    return Math.floor(Math.random() * (max - min) + min)\r\n}\r\n\r\n\r\n\r\nexport function weightedChoice(choicePercents, arrayToChooseFrom) {\r\n    let randomIndex = randomInt(0, arrayToChooseFrom.length)\r\n    let choice = arrayToChooseFrom[randomIndex]\r\n    // console.log(`CHOICE: ${choice}`);\r\n    return choice\r\n}\r\n\r\n// This function could be made more efficient through using sorted arrays and pointers that \r\n// enabled us to not re-scan the leading portion of setTwo when we know we are looking for a \r\n// higher number it only makes sense to look in higher indices. Besides that, early returns \r\n// could be added in case the lowest or highest numbers in setOne fall outside the range of \r\n// setTwo. This intersect is being made with setOne.length === 4 (cells in line) and a \r\n// potentially much longer setTwo (player's numbers)\r\nexport function intersect(setOne, setTwo) {\r\n    return setOne.filter(item => setTwo.includes(item))\r\n}","// MY Logical components\r\nimport { lineToCellsMap, cellToLinesMap } from './winningLineMaps'\r\nimport { intersect } from \"./lowLevelHelpers\";\r\n\r\nexport function gameIsOver(gameStatus) {\r\n    return (gameStatus === 'playerOneWins' || gameStatus === 'playerTwoWins' || gameStatus === 'gameDrawn')\r\n}\r\n\r\n\r\n\r\nexport function playerOnesMoves(moveList) {\r\n    return moveList.filter((cell, turn) => turn % 2 === 0).filter(cell => cell !== -1)\r\n}\r\nexport function playerTwosMoves(moveList) {\r\n    return moveList.filter((cell, turn) => turn % 2 === 1).filter(cell => cell !== -1)\r\n}\r\n\r\nexport function getBoardData(moveList) {\r\n    let data = new Array(42).fill(\"unclaimed\")\r\n    moveList.forEach((move, turn) => {\r\n        if (move !== -1) {\r\n            let player = turn % 2 === 0 ? \"playerOne\" : \"playerTwo\"\r\n            data[move] = player\r\n        }\r\n    })\r\n    return data\r\n}\r\n// const boardData = getBoardData(moveList)  I don't like that getColumnData is called 7 times and each time it calls getBoardData rather than caching this result and reusing it, updating it automatically only when the moveList updates. useEffect could help?\r\nfunction getColumnData(columnIndex, moveList) {\r\n    let boardData = getBoardData(moveList)\r\n    return boardData.filter((claimStatus, cellId) => cellId % 7 === columnIndex)\r\n}\r\n\r\nexport function getLowestUnclaimedCell(columnIndex, moveList) {\r\n    let columnData = getColumnData(columnIndex, moveList)\r\n    let lowestUnclaimedRow = columnData.indexOf(\"unclaimed\")\r\n    let lowestUnclaimedCell = (lowestUnclaimedRow === -1) ? -1 : (lowestUnclaimedRow * 7 + columnIndex)\r\n    // console.log(`lowestUnclaimedCell in col ${columnIndex} is cell \"${lowestUnclaimedCell}\"`);\r\n    return lowestUnclaimedCell\r\n}\r\n\r\n\r\nexport function nextPlayer(gameStatus) {\r\n    if (gameIsOver(gameStatus)) {\r\n        console.error(`Do not call nextPlayer() when the game is over.`);\r\n    }\r\n    return (gameStatus === \"playerOnesTurn\") ? \"playerOne\" : \"playerTwo\"\r\n} \r\nexport function nextPlayersMoves(gameStatus, moveList) {\r\n    if (gameIsOver(gameStatus)) {\r\n        console.error(`Do not call nextPlayersMoves() when the game is over.`);\r\n    }\r\n    return (gameStatus === \"playerOnesTurn\") ? playerOnesMoves(moveList) : playerTwosMoves(moveList)\r\n}\r\nexport function nextPlayerColor(gameStatus) {\r\n    return gameIsOver(gameStatus) ? \"unclaimed\" : (gameStatus === \"playerOnesTurn\") ? \"playerOne\" : \"playerTwo\"\r\n}\r\n\r\n// function getLastChipDropped(moveList) {\r\n//     let ml = moveList.slice()\r\n//     let lastCellId\r\n//     do {\r\n//         lastCellId = ml.pop()\r\n//     } while (lastCellId === -1)\r\n//     return lastCellId\r\n// }\r\n\r\n// Returns ENUM: 'playerOnesTurn', 'playerTwosTurn', 'playerOneWins', 'playerTwoWins', 'gameOverDraw'\r\n// This function efficiently checks to see if the last move created a win for the player who made it.\r\nexport function getGameStatus(moveList) {\r\n    let lastPlayerToMove = (moveList.length % 2 === 1) ? \"playerOne\" : \"playerTwo\"\r\n    let lastPlayersMoves = (lastPlayerToMove === \"playerOne\") ? playerOnesMoves(moveList) : playerTwosMoves(moveList)\r\n    let lastMoveMade = Number(lastPlayersMoves.slice(-1))\r\n    let linesAffectedByLastMove = cellToLinesMap.get(lastMoveMade)\r\n    for (let i = 0; i < linesAffectedByLastMove.length; i++) {\r\n        let line = linesAffectedByLastMove[i]\r\n        let cellsInLine = lineToCellsMap.get(line)\r\n        // For added efficiency I could at this point remove the lastMoveMade from cells in line and in the next line look for intersections of length 3.\r\n        if (intersect(cellsInLine, lastPlayersMoves).length === 4) {\r\n            return (lastPlayerToMove === 'playerOne') ? 'playerOneWins' : 'playerTwoWins'\r\n        }\r\n    }\r\n    let nonSkippedTurns = moveList.filter(cellId => cellId !== -1)\r\n    if (nonSkippedTurns.length >= 42) {\r\n        return 'gameOverDraw'\r\n    }\r\n    else {\r\n        return (moveList.length % 2 === 0) ? 'playerOnesTurn' : 'playerTwosTurn'\r\n    }\r\n}\r\n\r\n\r\nexport function cellIsUnclaimed(cellId, moveList) {\r\n    return (!moveList.includes(cellId))\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// Logic\r\nimport { gameIsOver, nextPlayerColor } from './logic/connectFourLogic'\r\n\r\n// MUI  components\r\nimport { Box, Container, Slide, Typography, Zoom } from '@material-ui/core'\r\n\r\n// Style & Layout Constants\r\nconst oneSixth = '16.666%'\r\nconst squarePercentage = '14.287%'\r\nconst rowHeightPercentage = '16.665%'\r\nconst columnWidthPercentage = '14.280%'\r\nconst headerHeightPercentage = columnWidthPercentage\r\nconst heightOfSixSquares = '85.714%'\r\n\r\nconst chipSizeRelativeToSquare = '84%'\r\n\r\nlet rowNumbers = [0, 1, 2, 3, 4, 5]\r\nlet columnNumbers = [0, 1, 2, 3, 4, 5, 6]\r\n\r\nexport function GameBoard(props) {\r\n    const { moveList, handleColumnClick, gameStatus } = props\r\n\r\n    function getColumnChipColors(columnIndex) {\r\n        let chipColors = boardChipColors().filter((player, cellId) => cellId % 7 === columnIndex)\r\n        // console.log(`CHIP COLORS for Column ${columnIndex}: ${chipColors}`)\r\n        return chipColors\r\n    }\r\n    function boardChipColors() {\r\n        let chipColors = new Array(42).fill('unclaimed')\r\n        moveList.forEach((cellId, turnNumber) => {\r\n            if (cellId !== -1) {              // -1 in moveList indicates a turn skipped due to wrong answer to math question\r\n                let player = (turnNumber % 2 === 0) ? \"playerOne\" : \"playerTwo\"  // Player One's moves are at Even indices in the moveList\r\n                chipColors[cellId] = player\r\n            }\r\n        })\r\n        // console.log(`Board Data: ${chipColors}`)\r\n        return chipColors\r\n    }\r\n    \r\n    return (\r\n        <Container id=\"gameBoard\"\r\n            disableGutters\r\n            sx={{\r\n                position: 'absolute',\r\n                top: 0,\r\n                height: '95%',\r\n                width: '95%',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'flex-end'\r\n            }}\r\n        >\r\n            <InfoHeaderRow gameStatus={gameStatus} />  \r\n            {columnNumbers.map((columnIndex) => {\r\n                let chipColors = getColumnChipColors(columnIndex)\r\n                return (\r\n                    <Column \r\n                        key={columnIndex}\r\n                        index={columnIndex}\r\n                        chipColors={chipColors}\r\n                        gameStatus={gameStatus}\r\n                        nextPlayerColor={nextPlayerColor(gameStatus)}\r\n                        handleColumnClick={handleColumnClick}\r\n                    />\r\n                )\r\n            })}\r\n            <RoundedBoardFrame />\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nfunction InfoHeaderRow(props) {\r\n    let { gameStatus } = props\r\n    let gameOver = gameIsOver(gameStatus)\r\n    let message = \"\"\r\n    if (gameOver) {\r\n        message = (gameStatus === \"playerOneWins\" ? \"Red Wins!\" : \"Yellow Wins!\")\r\n    }\r\n    \r\n    return (\r\n        <Box id='infoHeaderRow'\r\n            sx={{\r\n                position: 'absolute',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: headerHeightPercentage,\r\n                zIndex: 15,\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n            }}\r\n        >\r\n            <Zoom in={message !== \"\"} style={{ transitionDelay: '300ms' }} >\r\n                <Typography variant='h2' align='center' >\r\n                    {message}\r\n                </Typography>\r\n            </Zoom>\r\n            \r\n            \r\n        </Box>\r\n    )\r\n}\r\nfunction RoundedBoardFrame(props) {\r\n    return (\r\n        <Box id='roundedGameBorder'\r\n            sx={{\r\n                boxSizing: 'content-box',\r\n                position: 'absolute',\r\n                top: squarePercentage,\r\n                left: '-9px',\r\n                width: 'calc(100% - 2px)',\r\n                height: heightOfSixSquares,\r\n                border: \"10px solid\",\r\n                borderColor: \"board.main\",\r\n                borderRadius: \"10px\",\r\n                borderTop: 0\r\n            }}\r\n        />\r\n    )\r\n}\r\nfunction Column(props) {\r\n    const { index, chipColors, gameStatus, nextPlayerColor, handleColumnClick } = props\r\n    let columnLetter = ''\r\n    if (!gameIsOver(gameStatus)) {\r\n        switch (index) {\r\n            case 0:\r\n                columnLetter = 'A'\r\n                break;\r\n            case 1:\r\n                columnLetter = 'B'\r\n                break;\r\n            case 2:\r\n                columnLetter = 'C'\r\n                break;\r\n            case 3:\r\n                columnLetter = 'D'\r\n                break;\r\n            case 4:\r\n                columnLetter = 'E'\r\n                break;\r\n            case 5:\r\n                columnLetter = 'F'\r\n                break;\r\n            case 6:\r\n                columnLetter = 'G'\r\n                break;\r\n            default:\r\n                columnLetter = 'error'\r\n                break;\r\n        }\r\n    }\r\n    return (\r\n        <Box id=\"column\" \r\n            // ref={hoverRef} \r\n            onClick={() => handleColumnClick(index)}\r\n            sx={{\r\n                position: 'relative',\r\n                width: squarePercentage,\r\n                height: '100%',\r\n                zIndex: 9,\r\n                '&:hover #hoverChip': {\r\n                    backgroundColor: `chip.${nextPlayerColor}`,\r\n                },\r\n            }}\r\n        >\r\n            <HoverChipArea columnLetter={columnLetter} />\r\n            <ChipContainer chipColors={chipColors} />\r\n            <ColumnOfSquaresWithHoles />\r\n        </Box>\r\n    );\r\n}\r\nColumn.propTypes = {\r\n    index: PropTypes.number.isRequired,\r\n    nextPlayerColor: PropTypes.oneOf(['playerOne', 'playerTwo', 'unclaimed']),\r\n    handleColumnClick: PropTypes.func,\r\n}\r\n\r\nfunction Chip(props) {\r\n    const { color } = props\r\n    let claimed = (color !== \"unclaimed\")\r\n    let bgcolor = `chip.${color}`\r\n    return (\r\n        <Slide in={claimed} \r\n            direction=\"down\"\r\n            // easing=\"easing.parabolicAcceleration\"\r\n            // easing={{ enter: 'transitions.easing.easeOut', exit: 'transitions.easing.sharp' }}\r\n        >\r\n            <Box id=\"transparentSquareFrame\"\r\n                sx={{\r\n                    width: '100%',\r\n                    height: rowHeightPercentage,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                }}\r\n            >\r\n                <Box id=\"chip\"\r\n                    sx={{\r\n                        borderRadius: '50%',\r\n                        zIndex: 'chip',\r\n                        bgcolor: bgcolor,\r\n                        width: chipSizeRelativeToSquare,\r\n                        height: chipSizeRelativeToSquare,\r\n                    }}\r\n                />\r\n            </Box>\r\n        </Slide>\r\n\r\n    )\r\n}\r\nChip.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    color: PropTypes.oneOf(['playerOne', 'playerTwo', 'unclaimed']),\r\n}\r\n\r\nfunction HoverChipArea(props) {\r\n    return (\r\n        <Box id=\"hoverChipContainer\"\r\n            sx={{\r\n                // border: 'solid red 1px',\r\n                width: '100%',\r\n                height: squarePercentage,\r\n                zIndex: 8,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n            }}\r\n        >\r\n            <Box id=\"hoverChip\"\r\n                sx={{\r\n                    bgcolor: 'background',\r\n                    width: chipSizeRelativeToSquare,\r\n                    height: chipSizeRelativeToSquare,\r\n                    borderRadius: '50%',\r\n                    zIndex: 8,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'flex-end',\r\n                    fontSize: '2rem'\r\n                }}\r\n            >\r\n                {props.columnLetter}  \r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\nfunction ChipContainer(props) {\r\n    return (\r\n        <Box id=\"chipContainer\"\r\n            sx={{\r\n                width: '100%',\r\n                position: 'absolute',\r\n                top: squarePercentage,\r\n                bgcolor: 'transparent',\r\n                height: heightOfSixSquares,\r\n                zIndex: 8,\r\n                display: 'flex',\r\n                flexDirection: 'column-reverse',\r\n            }}\r\n        >\r\n            {props.chipColors.map((color, index) => {\r\n                return <Chip\r\n                    key={index}\r\n                    id={index}\r\n                    color={color}\r\n                // transition={false}\r\n                />\r\n            })}\r\n        </Box>\r\n    )\r\n}\r\nfunction ColumnOfSquaresWithHoles(props) {\r\n    function SquareWithHole(props) {\r\n        return (\r\n            <Box id=\"squareWithHole\"\r\n                key={props.index}\r\n                sx={{\r\n                    overflow: 'hidden',\r\n                    width: '100%',\r\n                    height: oneSixth,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    boxShadow: '0px 1px 1px 1px #0039cb',\r\n                }}\r\n            >\r\n                <Box id=\"hole\"\r\n                    sx={{\r\n                        boxShadow: \"0 0 0 99px #0039cb\",\r\n                        borderRadius: '50%',\r\n                        bgcolor: 'transparent',\r\n                        width: chipSizeRelativeToSquare,\r\n                        height: chipSizeRelativeToSquare,\r\n                    }}\r\n                />\r\n            </Box>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <Box id=\"columnOfSquares\"\r\n            sx={{\r\n                position: 'absolute',\r\n                top: squarePercentage,\r\n                bgcolor: 'transparent',\r\n                width: '100%',\r\n                height: heightOfSixSquares,\r\n                zIndex: 'board',\r\n                display: 'flex',\r\n                flexDirection: 'column-reverse',\r\n            }}\r\n        >\r\n            {rowNumbers.map((item, index) => {\r\n                return (<SquareWithHole key={index} />)\r\n            })}\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n","\r\n\r\nimport React from 'react'\r\n\r\n// MUI  components\r\nimport { Box, Button, Typography, Zoom, Dialog,  } from '@material-ui/core';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Zoom ref={ref} {...props} />;\r\n})\r\n\r\nexport function WelcomeModal(props) {\r\n    let { open,\r\n        boardSideLength, \r\n        openSettingsModal } = props\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            aria-describedby=\"welcome dialog\"\r\n            TransitionComponent={Transition}\r\n            fullWidth={true}\r\n            maxWidth='md'\r\n            PaperProps={{\r\n                sx: {\r\n                    height: `${0.85 * boardSideLength}px`,\r\n                    width: `${0.7 * boardSideLength}px`,\r\n                    minHeight: \"550px\",\r\n                    minWidth: \"375px\",\r\n                    borderRadius: '3rem',\r\n                    justifySelf: 'flex-start',\r\n                    alignSelf: 'flex-start',\r\n                    display: 'flex',\r\n                    justifyContent: 'stretch',\r\n                    // alignItems: 'center',\r\n                    px: 3,\r\n                    py: 3,\r\n                    overflowY: \"scroll\",\r\n                    \"-ms-overflow-style\": \"none\",    /* IE and Edge */\r\n                    \"scrollbar-width\": \"none\",       /* Firefox */\r\n                    \"::-webkit-scrollbar\": {         /* Hide scrollbar for Chrome, Safari and Opera */\r\n                        display: \"none\"\r\n                    }\r\n                }\r\n            }}\r\n        >\r\n            \r\n            <Typography variant='h3' align=\"center\" >\r\n                Welcome to Math Fact Connect Four!\r\n            </Typography>\r\n            <PlayNowButton openSettingsModal={openSettingsModal} />\r\n\r\n            \r\n            <Typography variant='h5' align=\"left\"  >\r\n                Rules of Play\r\n            </Typography>\r\n            <Typography variant='body1' align=\"left\" gutterBottom  >\r\n                Two players (or teams) take turns dropping chips.\r\n                The first to get four consecutive chips in any row, column, or diagonal wins!\r\n                But there's a catch, you must correctly answer the math question that pops-up or your turn will be skipped!\r\n            </Typography>\r\n            \r\n            <Typography variant='h5' align=\"left\" pt={1}  >\r\n                Suggested Use\r\n            </Typography>\r\n            <Typography variant='body1' align=\"left\" gutterBottom  >\r\n                Learning math foundations takes a lot of practice. There is no substitute for repetition. \r\n                The goal of this project is to make doing all that repetitive practice a little less dull, \r\n                and a little more joyful.\r\n            </Typography>\r\n            <Typography variant='body1' align=\"left\" gutterBottom  >\r\n                All the questions in this game were designed to be solved mentally.\r\n                Use your fingers if you have to! Just don't fall back to relying on the same boring old paper-and-pencil procedures.\r\n                Push yourself to try new mental math strategies like \"stepping stones\" and \"factor it first\".\r\n            </Typography>\r\n            <Typography variant='body1' align=\"left\" gutterBottom  >\r\n                By default the questions increase in difficulty as the game progresses but you can also \r\n                set it to ask questions of only one difficulty level throughout the game. This is particularly \r\n                useful when working with younger students. \r\n            </Typography>\r\n\r\n            <Typography variant='h5' align=\"left\" pt={1}  >\r\n                Note on Time Limits\r\n            </Typography>\r\n            <Typography variant='body1' align=\"left\" gutterBottom  >\r\n                Some students enjoy playing this game with a two-sided game timer (chess clock). \r\n                When doing this it is good to give each team about 10 minutes for the whole game.\r\n                That said, there is no timer built into this game on purpose. Most students report \r\n                feeling anxious and having less fun, and answer questions less accurately when playing with a timer.\r\n            </Typography>\r\n            <Typography variant='body1' align=\"left\" gutterBottom  >\r\n                Accuracy is more imporatant than speed. \r\n                Starting out, your focus should be on getting questions right, on holding all the\r\n                moving pieces in your mind. Accuracy results from focus, conceptual understanding, and effort.\r\n                Speed is just a pleasant side-effect of getting lots of practice.\r\n            </Typography>\r\n\r\n            <Typography variant='h5' align=\"left\" pt={1}  >\r\n                Thanks\r\n            </Typography>\r\n            <Typography variant='body1' align=\"left\" gutterBottom  >\r\n                I want to thank my students at College Track, the Waldorf School of New Orleans, and Bricolage Academy\r\n                for inspiring me to create this game and helping me to test and improve it. This game was originally played\r\n                using laminated cards hung on the wall. It was my students' enthusiastic responses to this game that made me \r\n                want to convert it to a free web app so I could share it with other teachers and students.\r\n            </Typography>\r\n\r\n            <Typography variant='h5' align=\"left\" pt={1}  >\r\n                Dig Deeper\r\n            </Typography>\r\n            <Typography variant='body1' align=\"left\" gutterBottom  >\r\n                The code for this project is all open-source so if your are curious how it works behind the scenes just visit my GitHub page.\r\n                If you find a mistake or have an idea for how to improve this game, please open an issue.\r\n            </Typography>\r\n            <Typography color=\"text.primary\" variant=\"body1\" >\r\n                A production of the NOLA STEM Garden &copy;\r\n            </Typography>\r\n        </Dialog>\r\n    )\r\n\r\n    function PlayNowButton() {\r\n        return (\r\n            <Box m={3} sx={{ display: 'flex', justifyContent: \"center\" }} >\r\n                <Button\r\n                    onClick={openSettingsModal}\r\n                    variant='contained'\r\n                    sx={{\r\n                        m: 1,\r\n                        width: '66%'\r\n                    }}\r\n                    children=\"Start Game\"\r\n                />\r\n            </Box>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { Popover, Button, Menu, MenuItem, } from '@material-ui/core'\r\n\r\n// Icons\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport UndoIcon from \"@material-ui/icons/Undo\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n// import PersonAdd from '@material-ui/icons/PersonAdd';\r\n// import Settings from '@material-ui/icons/Settings';\r\n// import Logout from '@material-ui/icons/Logout';\r\n\r\nexport function InGameMenu(props) {\r\n    let { open, \r\n        openInGameMenu,\r\n        handleNewGameClick, \r\n        handleUndoClick } = props\r\n    \r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const openMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n        openInGameMenu()\r\n    };\r\n    const closeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const id = open ? 'simple-popover' : undefined;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button variant=\"text\"\r\n                aria-describedby={id} \r\n                onClick={openMenu}\r\n                sx={{\r\n                    color: 'common.black',\r\n                    bgcolor: 'background',\r\n                    position: 'absolute',\r\n                    top: '1%',\r\n                    right: '1%',\r\n                    zIndex: 9999,\r\n                    padding: 0,\r\n                    minWidth: '10px',\r\n                }}\r\n            >\r\n                <MenuIcon />\r\n            </Button>\r\n            <Popover\r\n                id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={closeMenu}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{ \r\n                    vertical: 'top', \r\n                    horizontal: 'right', \r\n                }}\r\n            >\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    open={open}\r\n                    onClose={closeMenu}\r\n                    onClick={closeMenu}\r\n                    PaperProps={{\r\n                        elevation: 0,\r\n                        sx: {\r\n                            overflow: 'visible',\r\n                            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\r\n                            mt: 1.5,\r\n                            '& .MuiAvatar-root': {\r\n                                width: 32,\r\n                                height: 32,\r\n                                ml: -0.5,\r\n                                mr: 1,\r\n                            },\r\n                            '&:before': {\r\n                                content: '\"\"',\r\n                                display: 'block',\r\n                                position: 'absolute',\r\n                                top: 0,\r\n                                right: 14,\r\n                                width: 10,\r\n                                height: 10,\r\n                                bgcolor: 'background.paper',\r\n                                transform: 'translateY(-50%) rotate(45deg)',\r\n                                zIndex: 0,\r\n                            },\r\n                        },\r\n                    }}\r\n                    transformOrigin={{ horizontal: 'right', vertical: 'top' }}\r\n                    anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n                >\r\n                    <MenuItem>\r\n                        <NewGameButton \r\n                            handleClick={handleNewGameClick}\r\n                        />\r\n                    </MenuItem>\r\n                    <MenuItem>\r\n                        <UndoButton \r\n                            handleClick={handleUndoClick}\r\n                        />\r\n                    </MenuItem>\r\n                </Menu>\r\n            </Popover>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\nfunction NewGameButton(props) {\r\n    let { handleClick } = props\r\n    return (\r\n        <Button\r\n            variant=\"outlined\"\r\n            startIcon={<ReplayIcon />}\r\n            onClick={() => handleClick()}\r\n            sx={{\r\n                width: '100%'\r\n            }}\r\n        >\r\n            New&nbsp;Game\r\n        </Button>\r\n    )\r\n}\r\n\r\nfunction UndoButton(props) {\r\n    let { handleClick } = props\r\n    return (\r\n        <Button\r\n            variant=\"outlined\"\r\n            startIcon={<UndoIcon />}\r\n            onClick={() => handleClick()}\r\n            sx={{\r\n                width: '100%'\r\n            }}\r\n        >\r\n            Undo&nbsp;Move\r\n        </Button>\r\n    )\r\n}","import React from 'react'\r\n\r\n// MUI  components\r\nimport { Box, Button, IconButton, Dialog, Zoom, Typography, Grid } from '@material-ui/core'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserFriends, faRobot } from '@fortawesome/free-solid-svg-icons';\r\n\r\n// ICONS\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faRobot, faUser, faPlus, faTimes, faDivide, faSuperscript } from '@fortawesome/free-solid-svg-icons'\r\n// const RobotIcon = () => { return <FontAwesomeIcon icon={faRobot} /> }\r\n// const UserIcon = () => { return <FontAwesomeIcon icon={faUser} /> }\r\n// const PlusIcon = () => { return <FontAwesomeIcon icon={faPlus} /> }\r\n// const TimesIcon = () => { return <FontAwesomeIcon icon={faTimes} /> }\r\n// const DivideIcon = () => { return <FontAwesomeIcon icon={faDivide} /> }\r\n// const SuperscriptIcon = () => { return <FontAwesomeIcon icon={faSuperscript} /> }\r\n// import { faPlus, faTimes, faDivide, faSuperscript } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// Style & Layout Constants\r\nconst opponentHeight = \"25%\"\r\nconst topicHeight = \"35%\"\r\nconst difficultyHeight = \"25%\"\r\nconst inputHeight = \"15%\"\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Zoom ref={ref} {...props} />;\r\n})\r\n\r\n\r\nexport function SettingsModal(props) {\r\n    let { \r\n        open,\r\n        boardSideLength,\r\n        startNewGame,\r\n        cancelNewGame,\r\n        opponent,\r\n        mathTopics,\r\n        difficultyMode,\r\n        toggleCombine,\r\n        toggleMultiply,\r\n        selectOpponent,\r\n        selectDifficulty\r\n    } = props\r\n\r\n    let noneSelectedError = Object.values(mathTopics).filter((v) => v).length === 0;\r\n    \r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            aria-describedby=\"game settings dialog\"\r\n            TransitionComponent={Transition}\r\n            fullWidth={true}\r\n            maxWidth='md'\r\n            PaperProps={{\r\n                sx: {\r\n                    height: `${0.85 * boardSideLength}px`,\r\n                    width: `${0.7 * boardSideLength}px`,\r\n                    minHeight: \"550px\",\r\n                    minWidth: \"375px\",\r\n                    borderRadius: '3rem',\r\n                    justifySelf: 'flex-start',\r\n                    alignSelf: 'flex-start',\r\n                    px: 2,\r\n                    py: 2\r\n                }\r\n            }}\r\n        >\r\n            <OpponentSelector />\r\n            <MathTopicSelector />\r\n            <DifficultyModeSelector />\r\n            <StartAndCancelButtons \r\n                cancelNewGame={cancelNewGame}\r\n                startNewGame={startNewGame}\r\n            />\r\n            \r\n\r\n        </Dialog>\r\n    )\r\n\r\n\r\n    function OpponentSelector() {\r\n        return (\r\n            <Box sx={{ \r\n                // border: 'solid red 1px',\r\n                height: opponentHeight, \r\n                display: 'flex', \r\n                flexDirection: 'column' \r\n                }} >\r\n                <Typography \r\n                    variant='h5'\r\n                    align=\"center\"\r\n                >\r\n                    Play vs. Human or Bot?\r\n                </Typography>\r\n                <Grid container spacing={2} sx={{ height: '100%', p: \"0 2rem\" }} >\r\n                    <Grid item xs={6} >\r\n                        <PlayVsHumanButton   />\r\n                    </Grid>\r\n                    <Grid item xs={6} >\r\n                        <PlayVsBotButton />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n\r\n            </Box>\r\n        )\r\n\r\n        function PlayVsHumanButton(props){\r\n            return (\r\n                <IconButton\r\n                    // onClick={() => { opponent = \"human\" }}\r\n                    onClick={() => selectOpponent(\"human\")}\r\n                    sx={{\r\n                        height: \"100%\",\r\n                        width: '100%'\r\n                    }}\r\n                    color={(opponent === \"human\") ? \"primary\" : \"secondary\"}\r\n                >\r\n                    <FontAwesomeIcon\r\n                        icon={faUserFriends}\r\n                        size=\"2x\"\r\n                    />\r\n                </IconButton>\r\n            )\r\n        }\r\n        function PlayVsBotButton(props) {\r\n            return (\r\n                <IconButton\r\n                    // onClick={() => {opponent = \"bot\"}}\r\n                    onClick={() => selectOpponent(\"bot\")}\r\n                    sx={{ \r\n                        height: \"100%\",\r\n                        width: '100%' \r\n                    }}\r\n                    color={(opponent === \"bot\") ? \"primary\" : \"secondary\"}\r\n\r\n                >\r\n                    <FontAwesomeIcon\r\n                        icon={faRobot}\r\n                        size=\"2x\"\r\n                    />\r\n                </IconButton>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    function MathTopicSelector() {\r\n        \r\n        return (\r\n            <Box sx={{\r\n                // border: 'solid red 1px',\r\n                height: topicHeight,  \r\n                display: 'flex', \r\n                flexDirection: 'column' \r\n            }}>\r\n                <Typography\r\n                    variant='h5'\r\n                    align=\"center\"\r\n                    gutterBottom\r\n                >\r\n                    What math topics should we include?\r\n                </Typography>\r\n                <Grid container spacing={1} px=\"2rem\" >\r\n                    <Grid item xs={12} >\r\n                        <CombineButton />\r\n                    </Grid>\r\n                    <Grid item xs={12} >\r\n                        <MultiplyButton />\r\n                    </Grid>\r\n                    <Grid item xs={12} sx={{ py: 0 }}>\r\n                        <Typography\r\n                            variant='body1'\r\n                            align=\"center\"\r\n                            color=\"error\"\r\n                            display={noneSelectedError ? \"flex\" : \"none\"}\r\n                            gutterBottom\r\n                        >\r\n                            *** You must select at least one topic.\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </Box>\r\n        )\r\n        function CombineButton() {\r\n            let selected = (mathTopics.combine === true)\r\n            return (\r\n                <Button\r\n                    onClick={toggleCombine}\r\n                    variant={selected ? \"contained\" : \"outlined\"}\r\n                    sx={{ width: '100%' }}\r\n                    children={\r\n                        \"Combine & Split Up\"\r\n                    }\r\n                />\r\n            )\r\n        }\r\n        function MultiplyButton() {\r\n            let selected = (mathTopics.multiply === true)\r\n            return (\r\n                <Button\r\n                    onClick={toggleMultiply}\r\n                    variant={selected ? \"contained\" : \"outlined\"}\r\n                    sx={{ width: '100%' }}\r\n                    children={\r\n                        \"Multiply & Factor\"\r\n                    }\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    function DifficultyModeSelector() {\r\n        return (\r\n            <Box sx={{\r\n                height: difficultyHeight,\r\n                display: 'flex',\r\n                flexDirection: 'column'\r\n            }}>\r\n                <Typography\r\n                    variant='h5'\r\n                    align=\"center\"\r\n                    gutterBottom\r\n                >\r\n                    How hard should the questions be?\r\n                </Typography>\r\n                <Grid container spacing={1} px=\"2rem\" >\r\n                    <Grid item xs={4} >\r\n                        <DifficultyModeButton mode=\"easy\" />\r\n                    </Grid>\r\n                    <Grid item xs={4} >\r\n                        <DifficultyModeButton mode=\"medium\" />\r\n                    </Grid>\r\n                    <Grid item xs={4} >\r\n                        <DifficultyModeButton mode=\"hard\" />\r\n                    </Grid>\r\n                    <Grid item xs={12} >\r\n                        <DifficultyModeButton mode=\"increasing\" />\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        )\r\n        function DifficultyModeButton(props) {\r\n            let { mode } = props\r\n            return (\r\n                <Button\r\n                    onClick={() => selectDifficulty(mode)}\r\n                    variant={(difficultyMode === mode) ? \"contained\" : \"outlined\"}\r\n                    sx={{\r\n                        width: \"100%\"\r\n                    }}\r\n                    children={(mode === \"increasing\") ? \"increasing difficulty\" : `${mode}`}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    function StartAndCancelButtons() {\r\n        return(\r\n            <Box sx={{\r\n                borderTop: `solid green 3px`,\r\n                borderColor: 'primary.main',\r\n                height: inputHeight,\r\n                display: 'flex',\r\n                justifyContent: 'flex-end',\r\n                mt: 3,\r\n                mb: 1,\r\n                pt: 2,\r\n                pr: 1,\r\n            }}>\r\n                <CancelButton\r\n                    cancelNewGame={cancelNewGame}\r\n                />\r\n                <StartGameButton\r\n                    startNewGame={startNewGame}\r\n                />\r\n            </Box>\r\n        )\r\n    }\r\n    function CancelButton(props) {\r\n        const { cancelNewGame } = props\r\n        return (\r\n            <Button\r\n                onClick={cancelNewGame}\r\n                variant='outlined'\r\n                // color=\"error\"\r\n                disabled={noneSelectedError}\r\n                sx={{\r\n                    m: 1,\r\n                    width: '42%'\r\n                }}\r\n                children=\"Cancel\"\r\n            />\r\n        )\r\n    }\r\n    function StartGameButton(props) {\r\n        const { startNewGame } = props\r\n        return (\r\n            <Button\r\n                onClick={() => startNewGame(mathTopics, difficultyMode, opponent)}\r\n                variant='contained'\r\n                disabled={noneSelectedError}\r\n                sx={{\r\n                    m: 1,\r\n                    width: '42%'\r\n                }}\r\n                children=\"Start Game\"\r\n            />\r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\n\r\n// MUI  components\r\nimport { Box, Button, Dialog, Zoom, Typography, FormControl, InputLabel, OutlinedInput } from '@material-ui/core'\r\n\r\n// Style & Layout Constants\r\nconst instructionsHeight = \"33%\"\r\nconst equationHeight = \"32%\"\r\nconst inputHeight = \"35%\"\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Zoom ref={ref} {...props} />;\r\n})\r\n\r\nexport function MathQuestionModal(props) {\r\n    let { question, \r\n        open,\r\n        headerText,\r\n        nextPlayerColor,\r\n        handleAnswerSubmit, \r\n        boardSideLength } = props \r\n    \r\n    let { correctAnswer, equationString, inputType } = question\r\n    let borderColor = `chip.${nextPlayerColor}`\r\n\r\n    return (\r\n        <Dialog \r\n            // keepMounted\r\n            disableEscapeKeyDown\r\n            open={open}\r\n            onBackdropClick={() => {}}  // disable close on bg click\r\n            aria-describedby=\"math-question-dialog\"\r\n            TransitionComponent={Transition}\r\n            fullWidth={true}\r\n            maxWidth='md'\r\n            PaperProps={{\r\n                sx: {\r\n                    // border: `solid ${nextPlayerColor(gameStatus)} 5px`,\r\n                    border: `solid green 0.5rem`,\r\n                    // border: `solid ${borderColor} 5px`,\r\n                    borderColor: borderColor,\r\n                    margin: `${0.05 * boardSideLength}px`,\r\n                    height: `${0.9 * boardSideLength}px`,\r\n                    width: `${0.9 * boardSideLength}px`,\r\n                    borderRadius: '50%',\r\n                    justifySelf: 'flex-start',\r\n                    alignSelf: 'flex-start'\r\n\r\n                }\r\n            }}\r\n        >\r\n            <HeaderText headerText={headerText} />\r\n            <QuestionEquation equationString={equationString} />\r\n            <AnswerInputComponent \r\n                inputType={inputType}\r\n                correctAnswer={correctAnswer}\r\n                handleAnswerSubmit={handleAnswerSubmit}\r\n            />\r\n        </Dialog>\r\n    )\r\n    \r\n    function HeaderText(props) {\r\n        return (\r\n            <Typography id=\"Instructions\"\r\n                variant='h3'\r\n                sx={{\r\n                    height: instructionsHeight,\r\n                    width: '100%',\r\n                    display: 'flex',\r\n                    flexFlow: 'row wrap',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'flex-end',\r\n                }}\r\n            >\r\n                {props.headerText}\r\n            </Typography>\r\n        )\r\n    }\r\n    function QuestionEquation(props) {\r\n        const { equationString } = props\r\n        const fontStyle = (equationString.length > 12) ? 'h2' : 'h1'\r\n\r\n        return (\r\n            <Typography variant={fontStyle} \r\n                sx={{\r\n                    width: '100%',\r\n                    height: equationHeight,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    overflow: 'visible',\r\n                }}\r\n            >\r\n                {equationString}\r\n            </Typography>\r\n        )\r\n    }\r\n    function AnswerInputComponent(props) {\r\n        const { inputType, correctAnswer, handleAnswerSubmit } = props\r\n\r\n        const [playersAnswer, setPlayersAnswer] = useState(\"\")\r\n        const answerIsNum = /^\\d+$/.test(playersAnswer)\r\n        const error = (playersAnswer.length > 0 && !answerIsNum)\r\n        const handlePlayersAnswerChange = (event) => {\r\n            let updatedAnswer = event.target.value.trim()\r\n            setPlayersAnswer(updatedAnswer)\r\n        }\r\n\r\n        if (inputType === \"textField\") {\r\n            return (\r\n                <NumericalTextInput\r\n                    error={error}\r\n                    handleSubmitButtonClick={handleAnswerSubmit}\r\n                />\r\n            )\r\n        }\r\n        else if (inputType === \"compareButtons\") {\r\n            return (\r\n                <CompareButtons \r\n                    // handleSubmitButtonClick={() => handleAnswerSubmit(playersAnswer)}\r\n                />\r\n            )\r\n        }\r\n        else {\r\n            console.error(`getInputComponent failed. Invalid inputType: ${inputType}`)\r\n        }\r\n\r\n        function NumericalTextInput(props) {\r\n            const { error, handleSubmitButtonClick } = props\r\n\r\n            return (\r\n                <Box sx={{\r\n                    height: inputHeight,\r\n                    width: '100%',\r\n                    padding: '0 20%',\r\n                }}>\r\n                    <FormControl \r\n                        id=\"answer-input-form\"\r\n                        color=\"primary\"\r\n                        error={error}\r\n                        sx={{\r\n                            display: 'flex',\r\n                            flexFlow: 'row nowrap',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'flex-start',\r\n                        }}\r\n                    >\r\n                        <InputLabel>{(error === false) ? \"Your Answer\" : \"Enter a whole number\"}</InputLabel>\r\n                        <OutlinedInput\r\n                            label={(error === false) ? \"Your Answer\" : \"Enter a whole number\"}\r\n                            value={playersAnswer}\r\n                            id=\"answer-input\"\r\n                            fullWidth\r\n                            size=\"medium\"\r\n                            autoFocus\r\n                            autoComplete='off'\r\n                            type=\"tel\"\r\n                            pattern='[0-9]*'\r\n                            onChange={handlePlayersAnswerChange}\r\n                            inputProps={{ \r\n                                style: { fontSize: '2rem', height: '2rem' }\r\n                            }}\r\n                            sx={{ width: '62%' }}\r\n                            onKeyDown={(event) => {\r\n                              if (event.key === \"Enter\" && playersAnswer !== \"\") {\r\n                                handleSubmitButtonClick(playersAnswer)\r\n                              }\r\n                            }}\r\n                        />\r\n                        <SubmitButton\r\n                            error={error}\r\n                            playersAnswer={playersAnswer}\r\n                            correctAnswer={correctAnswer}\r\n                            handleSubmitButtonClick={handleSubmitButtonClick}\r\n                        />\r\n                    </FormControl>\r\n                </Box>\r\n            )\r\n        }\r\n\r\n        function SubmitButton(props) {\r\n            const { error, playersAnswer, handleSubmitButtonClick } = props\r\n            return (\r\n                <Button\r\n                    disabled={error || playersAnswer === \"\" }\r\n                    onClick={() => handleSubmitButtonClick(playersAnswer)}\r\n                    variant='contained'\r\n                    sx={{ \r\n                        ml: 1, \r\n                        px: 2.5,\r\n                        lineHeight: '3rem',\r\n                        width: '42%'\r\n                    }}\r\n                    children=\"Submit\"\r\n                />\r\n            )\r\n        }\r\n\r\n        function CompareButtons(props) {\r\n            // let { handleSubmitButtonClick } = props\r\n\r\n            return (\r\n                <Box \r\n                    sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                    }}\r\n                >\r\n                    <Button />\r\n                    <Button />\r\n                    <Button />\r\n                </Box>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","// Exports helper for when questionGenerator has selected the \"combining\" topic\r\nimport { randomInt, chooseRandomFromArray } from \"../lowLevelHelpers\";\r\n\r\nconst missingMinuendInstructions = [\r\n    \"Minus how many?\",\r\n    \"Take away what?\",\r\n    \"How far apart?\",\r\n]\r\n\r\n\r\nexport function getCombiningQuestion(difficulty) {\r\n    console.assert((difficulty === \"easy\" || difficulty === \"medium\" || difficulty === \"hard\"), `getCombiningQuestion recieved invalid difficulty ${difficulty}` )\r\n    console.log(`Generating Combining Question of difficulty \"${difficulty}\"`)\r\n    \r\n    let types = [\r\n        missingSumTwo,\r\n        missingSumThree,\r\n        missingDifference,\r\n        missingAddendTwo,\r\n        missingAddendThree,\r\n        doubleTripleQuadruple,\r\n        howFarApart,\r\n        missingMinuend\r\n    ]\r\n    return chooseRandomFromArray(types)(difficulty)\r\n    \r\n}\r\n\r\n\r\n/////////////////////////////////////////////////////////////////\r\n//  INSTRUCTIONS\r\n/////////////////////////////////////////////////////////////////\r\n\r\nconst missingSumInstructions = [\r\n    \"Add\",\r\n    \"What's the Sum?\",\r\n    \"Find the Total\"\r\n]\r\nconst missingDifferenceInstructions = [\r\n    \"Subtract\",\r\n    \"Find the Difference\",\r\n    \"How much is left?\"\r\n]\r\nconst missingAddendInstructions = [\r\n    \"Plus what?\",\r\n    \"Add how many?\",\r\n    \"How many more?\"\r\n]\r\nconst howFarApartInstructions = [\r\n    \"How far apart?\"\r\n]\r\n\r\nfunction missingSumTwo(difficulty) { \r\n    let vars = {}\r\n    if (difficulty === \"easy\") {            // Grade 1\r\n        vars.a = randomInt(3,20)\r\n        vars.b = randomInt(3,20)\r\n    }\r\n    else if (difficulty === \"medium\") {     // Grade 2\r\n        vars.a = randomInt(20, 100)\r\n        vars.b = randomInt(20, 100)\r\n    }\r\n    else if (difficulty === \"hard\") {       // Grade 3\r\n        vars.a = randomInt(100, 1000)\r\n        vars.b = randomInt(100, 1000)\r\n    }\r\n    vars.c = vars.a + vars.b\r\n    return {\r\n        type: \"missingSumTwo\",\r\n        vars: vars,\r\n        correctAnswer: vars.c,\r\n        equationString: `${vars.a} + ${vars.b} = __`,\r\n        instructions: chooseRandomFromArray(missingSumInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\nfunction missingSumThree(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {            // Grade 1\r\n        vars.a = randomInt(2, 13)\r\n        vars.b = randomInt(2, 13)\r\n        vars.c = randomInt(2, 13)\r\n    }\r\n    else if (difficulty === \"medium\") {     // Grade 2\r\n        vars.a = randomInt(10, 100)\r\n        vars.b = randomInt(10, 100)\r\n        vars.c = randomInt(10, 100)\r\n    }\r\n    else if (difficulty === \"hard\") {       // Grade 3\r\n        vars.a = randomInt(100, 600)\r\n        vars.b = randomInt(50, 100)\r\n        vars.c = randomInt(50, 100)\r\n    }\r\n    vars.d = vars.a + vars.b + vars.c\r\n    return {\r\n        type: \"missingSumThree\",\r\n        vars: vars,\r\n        correctAnswer: vars.d,\r\n        equationString: `${vars.a} + ${vars.b} + ${vars.c} =__`,\r\n        instructions: chooseRandomFromArray(missingSumInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\nfunction missingDifference(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {            // Grade 1\r\n        vars.a = randomInt(10, 40)\r\n        vars.b = randomInt(3, 10)\r\n    }\r\n    else if (difficulty === \"medium\") {     // Grade 2\r\n        vars.a = randomInt(40, 200)\r\n        vars.b = randomInt(10, 40)\r\n    }\r\n    else if (difficulty === \"hard\") {       // Grade 3\r\n        vars.a = randomInt(300, 1000)\r\n        vars.b = randomInt(50, 300)\r\n    }\r\n    vars.c = vars.a - vars.b\r\n    return {\r\n        type: \"missingDifference\",\r\n        vars: vars,\r\n        correctAnswer: vars.c,\r\n        equationString: `${vars.a} - ${vars.b} = __`,\r\n        instructions: chooseRandomFromArray(missingDifferenceInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\n\r\nfunction missingAddendTwo(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {            // Grade 1\r\n        vars.a = randomInt(10, 40)\r\n        vars.b = randomInt(3, 10)\r\n        vars.c = vars.a + vars.b\r\n    }\r\n    else if (difficulty === \"medium\") {     // Grade 2\r\n        vars.a = randomInt(40, 200)\r\n        vars.b = randomInt(10, 40)\r\n        vars.c = vars.a + vars.b\r\n    }\r\n    else if (difficulty === \"hard\") {       // Grade 3\r\n        vars.a = randomInt(100, 700)\r\n        vars.b = randomInt(50, 300)\r\n        vars.c = vars.a + vars.b\r\n    }\r\n    return {\r\n        type: \"missingAddendTwo\",\r\n        vars: vars,\r\n        correctAnswer: vars.b,\r\n        equationString: `${vars.a} + __ = ${vars.c}`,\r\n        instructions: chooseRandomFromArray(missingAddendInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\nfunction missingAddendThree(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {            // Grade 1\r\n        vars.a = randomInt(2, 12)\r\n        vars.b = randomInt(2, 12)\r\n        vars.c = randomInt(2, 12)\r\n    }\r\n    else if (difficulty === \"medium\") {     // Grade 2\r\n        vars.a = randomInt(11, 33)\r\n        vars.b = randomInt(11, 33)\r\n        vars.c = randomInt(11, 33)\r\n    }\r\n    else if (difficulty === \"hard\") {       // Grade 3\r\n        vars.a = randomInt(30, 100)\r\n        vars.b = randomInt(30, 100)\r\n        vars.c = randomInt(30, 100)\r\n    }\r\n    vars.d = vars.a + vars.b + vars.c\r\n    return {\r\n        type: \"missingAddendThree\",\r\n        vars: vars,\r\n        correctAnswer: vars.c,\r\n        equationString: `${vars.a} + ${vars.b} + __ = ${vars.d}`,\r\n        instructions: chooseRandomFromArray(missingAddendInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\nfunction howFarApart(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {            // Grade 1\r\n        vars.a = randomInt(3, 10)\r\n        vars.b = randomInt(10, 20)\r\n    }\r\n    else if (difficulty === \"medium\") {     // Grade 2\r\n        vars.a = randomInt(10, 40)\r\n        vars.b = randomInt(20, 100)\r\n    }\r\n    else if (difficulty === \"hard\") {       // Grade 3\r\n        vars.a = randomInt(100, 1000)\r\n        vars.b = randomInt(100, 1000)\r\n    }\r\n    vars.c = Math.abs(vars.a - vars.b)\r\n    return {\r\n        type: \"howFarApart\",\r\n        vars: vars,\r\n        correctAnswer: vars.c,\r\n        equationString: `${vars.a}  &  ${vars.b}`,\r\n        instructions: chooseRandomFromArray(howFarApartInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\n\r\n// DOUBLE TRIPLE QUADRUPLE\r\nfunction doubleTripleQuadruple(difficulty) {\r\n    let vars = {}\r\n    let dtqInstructions = \"\"\r\n    if (difficulty === \"easy\") {            // Grade 1\r\n        dtqInstructions = \"Double\"\r\n        vars.a = randomInt(3, 20)\r\n        vars.b = vars.a * 2\r\n    }\r\n    else if (difficulty === \"medium\") {     // Grade 2\r\n        dtqInstructions = \"Triple\"\r\n        vars.a = randomInt(20, 100)\r\n        vars.b = vars.a * 3\r\n    }\r\n    else if (difficulty === \"hard\") {       // Grade 3\r\n        dtqInstructions = chooseRandomFromArray([\"Quadruple\", \"Double Double\"])\r\n        vars.a = randomInt(20, 250)\r\n        vars.b = vars.a * 4\r\n    }\r\n    return {\r\n        type: \"doubleTripleQuadruple\",\r\n        vars: vars,\r\n        correctAnswer: vars.b,\r\n        equationString: `${vars.a}`,\r\n        instructions: dtqInstructions,\r\n        inputType: \"textField\",\r\n    }\r\n\r\n}\r\n\r\nfunction missingMinuend(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {            // Grade 1\r\n        vars.a = randomInt(3, 20)\r\n        vars.b = randomInt(0, vars.a)\r\n        vars.c = vars.a - vars.b\r\n    }\r\n    else if (difficulty === \"medium\") {     // Grade 2\r\n        vars.a = randomInt(40, 100)\r\n        vars.b = randomInt(5, vars.a)\r\n        vars.c = vars.a - vars.b\r\n    }\r\n    else if (difficulty === \"hard\") {       // Grade 3\r\n        vars.a = randomInt(200, 1000)\r\n        vars.b = randomInt(100, vars.a)\r\n        vars.c = vars.a - vars.b\r\n    }\r\n    return {\r\n        type: \"missingMinuend\",\r\n        vars: vars,\r\n        correctAnswer: vars.b,\r\n        equationString: `${vars.a} - __ = ${vars.c}`,\r\n        instructions: chooseRandomFromArray(missingMinuendInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\n\r\n\r\n\r\n// [\"compareSums\", `${vars[0]} + ${vars[1]} __ ${vars[2]} + ${vars[3]}`],\r\n","// Exports helpers for when questionGenerator has selected the \"multiplying\" topic\r\nimport { randomInt, chooseRandomFromArray } from \"../lowLevelHelpers\";\r\n\r\n\r\nexport function getMultiplyingQuestion(difficulty) {\r\n    console.assert((difficulty === \"easy\" || difficulty === \"medium\" || difficulty === \"hard\"), `getMultiplyingQuestion recieved invalid difficulty ${difficulty}`)\r\n    console.log(`Generating Multiplying Question of difficulty \"${difficulty}\"`)\r\n    \r\n    let types = [\r\n        missingProductTwo,\r\n        missingProductThree,\r\n        missingFactorTwo,\r\n        missingFactorThree,\r\n        halfThirdQuarter,\r\n        missingQuotient, \r\n        missingDivisor\r\n    ]\r\n    return chooseRandomFromArray(types)(difficulty)\r\n\r\n}\r\n\r\nconst mediumFactor = () => chooseRandomFromArray([4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 40, 45, 50, 60, 70, 75, 80, 90])\r\n\r\n\r\n/////////////////////////////////////////////////////////////////\r\n//  INSTRUCTIONS\r\n/////////////////////////////////////////////////////////////////\r\nconst missingProductInstructions = [\r\n    \"Multiply\",\r\n    \"Find the Product\",\r\n]\r\nconst missingFactorInstructions = [\r\n    \"What's missing?\",\r\n    \"Times what?\"\r\n]\r\nconst missingDivisorInstructions = [\r\n    \"Find the Divisor\",\r\n    \"How many groups of...\",\r\n    \"Divide by what?\"\r\n]\r\nconst missingQuotientInstructions = [\r\n    \"Find the Quotient\",\r\n    \"How many per group?\"\r\n]\r\n\r\n// MISSING PRODUCT\r\nfunction missingProductTwo(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {            // Grade 2\r\n        vars.a = randomInt(2, 11)\r\n        vars.b = randomInt(2, 11)\r\n    }\r\n    else if (difficulty === \"medium\") {     // Grade 3\r\n        vars.a = mediumFactor()\r\n        vars.b = randomInt(2, 16)\r\n    }\r\n    else if (difficulty === \"hard\") {       // Grade 5\r\n        vars.a = randomInt(11, 100)\r\n        vars.b = randomInt(11, 50)\r\n    }\r\n    vars.c = vars.a * vars.b\r\n\r\n    return {\r\n        type: \"missingProductTwo\",\r\n        vars: vars,\r\n        correctAnswer: vars.c,\r\n        equationString: `${vars.a} x ${vars.b} = __`,\r\n        instructions: chooseRandomFromArray(missingProductInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\nfunction missingProductThree(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {\r\n        vars.a = randomInt(2, 7)\r\n        vars.b = randomInt(2, 7)\r\n        vars.c = randomInt(2, 7)\r\n    }\r\n    else if (difficulty === \"medium\") {\r\n        vars.a = randomInt(2, 11)\r\n        vars.b = randomInt(2, 11)\r\n        vars.c = randomInt(2, 11)\r\n    }\r\n    else if (difficulty === \"hard\") {\r\n        vars.a = randomInt(2, 26)\r\n        vars.b = randomInt(2, 16)\r\n        vars.c = randomInt(2, 11)\r\n    }\r\n    vars.d = vars.a * vars.b * vars.c\r\n    return {\r\n        type: \"missingProductThree\",\r\n        vars: vars,\r\n        correctAnswer: vars.d,\r\n        equationString: `${vars.a} x ${vars.b} x ${vars.c} = __`,\r\n        instructions: chooseRandomFromArray(missingProductInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\n\r\n\r\n// MISSING FACTOR\r\nfunction missingFactorTwo(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {\r\n        vars.a = randomInt(2, 11)\r\n        vars.b = randomInt(2, 11)\r\n    }\r\n    else if (difficulty === \"medium\") {\r\n        vars.a = randomInt(5, 31)\r\n        vars.b = mediumFactor()\r\n    }\r\n    else if (difficulty === \"hard\") {\r\n        vars.a = randomInt(20, 100)\r\n        vars.b = randomInt(5, 20)\r\n    }\r\n    vars.c = vars.a * vars.b\r\n    return {\r\n        type: \"missingFactorTwo\",\r\n        vars: vars,\r\n        correctAnswer: vars.b,\r\n        equationString: `${vars.a} x __ = ${vars.c}`,\r\n        instructions: chooseRandomFromArray(missingFactorInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\nfunction missingFactorThree(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {\r\n        vars.a = randomInt(2, 7)\r\n        vars.b = randomInt(2, 7)\r\n        vars.c = randomInt(2, 7)\r\n    }\r\n    else if (difficulty === \"medium\") {\r\n        vars.a = randomInt(3, 11)\r\n        vars.b = randomInt(3, 11)\r\n        vars.c = randomInt(3, 11)\r\n    }\r\n    else if (difficulty === \"hard\") {\r\n        vars.a = randomInt(4, 26)\r\n        vars.b = randomInt(4, 11)\r\n        vars.c = randomInt(4, 16)\r\n    }\r\n    vars.d = vars.a * vars.b * vars.c\r\n\r\n    return {\r\n        type: \"missingFactorThree\",\r\n        vars: vars,\r\n        correctAnswer: vars.c,\r\n        equationString: `${vars.a} x ${vars.b} x __ = ${vars.d}`,\r\n        instructions: chooseRandomFromArray(missingFactorInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\n\r\n\r\n// MISSING DIVIDEND\r\n\r\n\r\n// MISSING DIVISOR\r\nfunction missingDivisor(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {\r\n        vars.b = randomInt(2, 10)\r\n        vars.c = randomInt(2, 11)\r\n    }\r\n    else if (difficulty === \"medium\") {\r\n        vars.b = randomInt(3, 12)\r\n        vars.c = randomInt(3, 16)\r\n    }\r\n    else if (difficulty === \"hard\") {\r\n        vars.b = mediumFactor()\r\n        vars.c = randomInt(3, 16)\r\n    }\r\n    vars.a = vars.b * vars.c\r\n\r\n    return {\r\n        type: \"missingDivisor\",\r\n        vars: vars,\r\n        correctAnswer: vars.b,\r\n        equationString: `${vars.a} ÷ __ = ${vars.c}`,\r\n        instructions: chooseRandomFromArray(missingDivisorInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\n\r\n\r\n// MISSING QUOTIENT\r\nfunction missingQuotient(difficulty) {\r\n    let vars = {}\r\n    if (difficulty === \"easy\") {\r\n        vars.b = randomInt(2, 10)\r\n        vars.c = randomInt(2, 11)\r\n    }\r\n    else if (difficulty === \"medium\") {\r\n        vars.b = mediumFactor()\r\n        vars.c = randomInt(3, 12)\r\n    }\r\n    else if (difficulty === \"hard\") {\r\n        vars.b = mediumFactor()\r\n        vars.c = randomInt(12, 26)\r\n    }\r\n    vars.a = vars.b * vars.c\r\n    return {\r\n        type: \"missingQuotient\",\r\n        vars: vars,\r\n        correctAnswer: vars.c,\r\n        equationString: `${vars.a} ÷ ${vars.b} = __`,\r\n        instructions: chooseRandomFromArray(missingQuotientInstructions),\r\n        inputType: \"textField\",\r\n    }\r\n}\r\n// DOUBLE TRIPLE QUADRUPLE  --> Now lives in Combining\r\n// HALF THIRD QUARTER \r\nfunction halfThirdQuarter(difficulty) {\r\n    let vars = {}\r\n    let instructions = \"\"\r\n    if (difficulty === \"easy\") {            // Grade 1\r\n        instructions = \"What's half of\"\r\n        // instructions = chooseRandomFromArray([\"What's half of\", \"Split evenly\"])\r\n        vars.a = randomInt(3, 50)\r\n        vars.b = vars.a * 2\r\n    }\r\n    else if (difficulty === \"medium\") {     // Grade 2\r\n        instructions = \"What's a third of\"\r\n        // instructions = chooseRandomFromArray([\"Find a third of\", \"Split three ways\"])\r\n        vars.a = randomInt(20, 100)\r\n        vars.b = vars.a * 3\r\n    }\r\n    else if (difficulty === \"hard\") {       // Grade 3\r\n        instructions = \"What's a quarter of\"\r\n        // instructions = chooseRandomFromArray([\"Find a quarter of\", \"Half and half again\"])\r\n        vars.a = randomInt(20, 250)\r\n        vars.b = vars.a * 4\r\n    }\r\n    return {\r\n        type: \"doubleTripleQuadruple\",\r\n        vars: vars,\r\n        correctAnswer: vars.a,\r\n        equationString: `${vars.b} ?`,\r\n        instructions: instructions,\r\n        inputType: \"textField\",\r\n    }\r\n}\r\n\r\n// [\"completeMultiplication\", `${vars[0]} x ${vars[1]} = ${vars[2]} x __`],\r\n        // [\"divisibility\", \"divisibilityCheckboxes\"],\r\n// [\"divisibility\", \"divisibilityCheckboxes NOT BUILT YET\"],  \r\n\r\n// [\"completeMultiplication\", chooseRandomFromArray([\"Find that factor!\", \"How many copies?\"])],\r\n//     [\"compareFractions\", chooseRandomFromArray([\"Which is more?\", \"Compare\", \"Which is greater?\"])],\r\n//     [\"compareSums\", chooseRandomFromArray([\"Which is more?\", \"Compare\", \"Which is greater?\"])],\r\n//     [\"divisibility\", chooseRandomFromArray([\"Is divisible by...\", \"Is a multiple of...\"])],","import { getCombiningQuestion } from \"./combiningGenerator\";\r\nimport { getMultiplyingQuestion } from \"./multiplyingGenerator\";\r\n// import { getFractionsQuestion } from \"./fractionsGenerator\";\r\n\r\nexport function testQuestion() {\r\n    let vars = [1, 2, 3, 6]\r\n    return {\r\n        type: \"missingSumThree\",\r\n        vars: vars,\r\n        correctAnswer: vars[3],\r\n        equationString: `${vars[0]} + ${vars[1]} + ${vars[2]} = __`,\r\n        instructions: \"Test Question\",\r\n        inputType: \"textField\",\r\n    }\r\n}\r\n\r\nlet generatorFuntions = new Map([\r\n    ['combine', getCombiningQuestion],\r\n    ['multiply', getMultiplyingQuestion]\r\n])\r\n\r\n\r\nexport function generateQuestion(topic, difficulty) {\r\n    return new Promise((resolve, reject) => {\r\n        let question = (generatorFuntions.get(topic)(difficulty))\r\n        console.log(`Generated an \"${difficulty}\" ${topic} Question --> ${JSON.stringify(question, null, 4)}`);\r\n        resolve(question)\r\n    });\r\n}\r\n\r\n// function getSequencesQuestion(difficulty) {\r\n\r\n// }\r\n// function getFractionsQuestion(difficulty) {\r\n\r\n// }\r\n// function getExponentsQuestion(difficulty) {\r\n\r\n// }\r\n\r\n","import { getLowestUnclaimedCell, playerOnesMoves, playerTwosMoves, cellIsUnclaimed } from './connectFourLogic';\r\nimport { lineToCellsMap, numberOfLines } from \"./winningLineMaps\";\r\nimport { chooseRandomFromArray, intersect } from './lowLevelHelpers';\r\n\r\n\r\n\r\nexport function getBotMove(moveList) {\r\n    let wins = getWinningMovesForBot(moveList)\r\n    let blocks = getDefensiveMovesForBot(moveList)\r\n    let legalMoves = getLegalMoves(moveList)\r\n    let winningMoves = intersect(wins, legalMoves)\r\n    let blockingMoves = intersect(blocks, legalMoves)\r\n\r\n    if (winningMoves.length > 0) {\r\n        console.log(`Bot found Winning move \"${wins}\" in legal options ${legalMoves}`);\r\n        return chooseRandomFromArray(winningMoves)\r\n    }\r\n    else if (blockingMoves.length > 0) {\r\n        console.log(`Choosing bot move with threats: ${blocks} and legal options ${legalMoves}`);\r\n        return chooseRandomFromArray(blockingMoves)\r\n    }\r\n    else {\r\n        console.log(`Choosing RANDOM bot move with NO ways to win and NO ways to block.`);\r\n        return chooseRandomFromArray(legalMoves)\r\n    }\r\n}\r\n\r\nfunction getLegalMoves(moveList) {\r\n    let moves = []\r\n    for (let col = 0; col < 7; col++) {\r\n        moves.push(getLowestUnclaimedCell(col, moveList))\r\n    }\r\n    // console.log(`legalMoves: ${moves} `);\r\n    return moves\r\n}\r\n\r\nfunction getDefensiveMovesForBot(moveList) {\r\n    let threats = []\r\n    let humansMoves = playerOnesMoves(moveList)\r\n    for (let lineId = 0; lineId < numberOfLines; lineId++) {\r\n        let cellsInLine = lineToCellsMap.get(lineId)\r\n        if (intersect(cellsInLine, humansMoves).length === 3) {\r\n            console.log(`Found Threat in Line ${lineId}: ${cellsInLine}`);\r\n            threats = threats.concat(cellsInLine.filter(cellId => !humansMoves.includes(cellId)))\r\n        }\r\n    }\r\n    return threats\r\n}\r\n\r\nexport function getWinningMovesForBot(moveList) {\r\n    let wins = []\r\n    let botsMoves = playerTwosMoves(moveList)\r\n    for (let lineId = 0; lineId < numberOfLines; lineId++) {\r\n        let cellsInLine = lineToCellsMap.get(lineId)\r\n        if (intersect(cellsInLine, botsMoves).length === 3) {\r\n            wins = wins.concat(cellsInLine.filter(cellId => cellIsUnclaimed(cellId, moveList)))\r\n        }\r\n    }\r\n    console.log(`Found Wins: ${wins}`);\r\n    return wins\r\n}","import {\r\n    createTheme,\r\n    responsiveFontSizes,\r\n} from '@material-ui/core/styles';\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#669944',\r\n            main: '#2e6b12',\r\n            dark: '#004000',  // Color applied on Button Hover\r\n            contrastText: '#FFFFFF'\r\n        },\r\n        secondary: {\r\n            light: '#FFFFF',\r\n            // main: 'rgba(46, 107, 18, 0.8)',  // washed out shade of primary.main\r\n            main: '#78ba59',\r\n            dark: '#004000',  // Color applied on Button Hover\r\n            contrastText: '#FFFFFF'\r\n        },\r\n        text: {\r\n            primary: 'rgba(0, 0, 0, 0.87)',\r\n            secondary: 'rgba(0, 0, 0, 0.54)',\r\n            disabled: 'rgba(0, 0, 0, 0.38)',\r\n            hint: 'rgba(0, 0, 0, 0.38)',\r\n        },\r\n        action: {\r\n            disabledBackground: '#2e6b12',\r\n            disabledOpacity: '0.5'\r\n        },\r\n        board: {\r\n            light: '#2962ff',\r\n            main: '#0039cb',\r\n            dark: '#001399',\r\n        },\r\n        chip: {\r\n            playerOne: '#d50000',  // red\r\n            playerTwo: '#ffea00',  // yellow\r\n            unclaimed: '#b3e5fc',  // light blue\r\n        },\r\n        background: '#b3e5fc',\r\n        white: '#FFFFFF',\r\n        transparent: 'rgba(0, 0, 0, 0)',\r\n        selectedButton: 'rgba(46, 107, 18, 1.0)',     // Same as primary.main\r\n        unselectedButton: 'rgba(46, 107, 18, 0.65)',\r\n    },\r\n    components: {\r\n        MuiPaper: {\r\n            styleOverrides: {  // Name of the slot\r\n                root: {        // Some CSS\r\n                    backgroundColor: '#fff',\r\n                },\r\n            },\r\n        },\r\n    },\r\n    typography: {\r\n        h1: {\r\n            fontSize: '5.5rem',\r\n        },\r\n        h2: {\r\n            fontSize: '4.0rem',\r\n        },\r\n        h3: {\r\n            fontSize: '2.3rem',\r\n        },\r\n        button: {\r\n            fontSize: '1.0rem',\r\n            fontWeight: '700'\r\n        }\r\n    },\r\n    status: {\r\n       \r\n    },\r\n    shape: {\r\n        borderRadius: 8,\r\n    },\r\n    spacing: 8,\r\n    transitions: {\r\n        easing: {\r\n            bounce: \"cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\r\n            parabolicAcceleration: \"cubic-bezier(0.5, 0.0, 1.0, 0.5)\"\r\n        }\r\n    },\r\n    zIndex: {\r\n        chip: 10,\r\n        board: 20\r\n    }\r\n\r\n});\r\n\r\nexport default responsiveFontSizes(theme, {factor: 2})\r\n// https://mui.com/customization/theming/#responsivefontsizes-theme-options-theme","import React from 'react'\r\n\r\n// MY components\r\nimport { GameBoard } from \"./GameBoard\";\r\nimport { WelcomeModal } from \"./modals/WelcomeModal\";\r\nimport { InGameMenu } from \"./modals/InGameMenu\";\r\nimport { SettingsModal } from \"./modals/SettingsModal\";\r\nimport { MathQuestionModal } from \"./modals/MathQuestionModal\";\r\n\r\n// Game Logic\r\nimport { gameIsOver, \r\n    getLowestUnclaimedCell,\r\n    getGameStatus, \r\n    nextPlayersMoves, \r\n    nextPlayerColor } from './logic/connectFourLogic'\r\nimport { testQuestion, generateQuestion } from './logic/questionGenerators/questionGenerator'\r\nimport { chooseRandomFromArray } from './logic/lowLevelHelpers'\r\nimport { getBotMove } from \"./logic/getBotMove\";\r\n\r\n// Custom Hooks\r\nimport { useScreenWidth, useScreenHeight } from \"./hooks\"\r\n\r\n// MUI  components\r\nimport { CssBaseline, Box } from '@material-ui/core'\r\n\r\n// THEME\r\nimport theme from \"./theme\"\r\nimport { ThemeProvider, } from '@material-ui/core/styles'\r\n\r\nexport default function App() {\r\n    // GAME SETTINGS\r\n    const [opponent, setOpponent] = React.useState(\"human\")\r\n    const [mathTopics, setMathTopics] = React.useState({\r\n        combine: true,\r\n        multiply: false,\r\n    })\r\n    const [difficultyMode, setDifficultyMode] = React.useState(\"increasing\")  // One of \"easy\" \"medium\" \"hard\" \"increasing\"\r\n    // I chose to use three separate useState calls rather than one settings object with these same three keys because this way I avoid having to use spread syntax to keep all other state as-is when updating one piece in the settings modal.  This may be misguided.\r\n\r\n    // GAME STATE\r\n    const [moveList, setMoveList] = React.useState([])  // An Array of integers ranging -1 thru 41 of indeterminate length\r\n    const [gameStatus, setGameStatus] = React.useState('playerOnesTurn')  // Enum ['playerOnesTurn', 'playerTwosTurn', 'playerOneWins', 'playerTwoWins', 'gameOverDraw']\r\n    const [openModal, setOpenModal] = React.useState(\"welcome\") // Enum: \"none\", \"question\", \"settings\", \"welcome\", \"inGameMenu\"\r\n    const [activeCell, setActiveCell] = React.useState(null) \r\n\r\n    // QUESTION MODAL PROPS\r\n    const [question, setQuestion] = React.useState(testQuestion())\r\n    const [headerText, setHeaderText] = React.useState(\"\")\r\n    const waysToSayCorrect = [\r\n        \"Correct!\",\r\n        \"Right!\",\r\n        \"That's it!\",\r\n        \"Good job!\",\r\n        \"Very good!\"\r\n    ]\r\n\r\n    // LAYOUT\r\n    const height = useScreenHeight()\r\n    const width = useScreenWidth()\r\n    const boardSideLength = (height <= width) ? height : width\r\n    \r\n    ///////////////////////////////////////////////////////\r\n    // CLICK HANDLERS\r\n    ///////////////////////////////////////////////////////\r\n    function handleColumnClick(columnIndex) {\r\n        if (gameIsOver(gameStatus)) {\r\n            console.log(`handleColumnClick() had NO EFFECT since game is already over!`)\r\n            return \r\n        }\r\n        let lowestUnclaimedCell = getLowestUnclaimedCell(columnIndex, moveList)\r\n        if (lowestUnclaimedCell === -1) {\r\n            console.log(`handleColumnClick() had NO EFFECT since column is full!`)\r\n            return\r\n        }\r\n        openMathQuestionModal(lowestUnclaimedCell)\r\n    }\r\n\r\n    function openMathQuestionModal(activeCell) {\r\n        const score = nextPlayersMoves(gameStatus, moveList).length\r\n        let difficulty = (difficultyMode === \"increasing\") ? determineDifficulty(score) : difficultyMode\r\n\r\n        const mathTopicsArray = Object.entries(mathTopics).filter(entry => entry[1]).map(entry => entry[0])\r\n        console.log(`Math Topics Array: ${mathTopicsArray}`);\r\n        let topic = chooseRandomFromArray(mathTopicsArray)\r\n\r\n        // My first Promise     \r\n        generateQuestion(topic, difficulty).then(newQuestion => {\r\n            // console.log(`Opening Modal with Question --> ${JSON.stringify(newQuestion, null, 4)}`);\r\n            setQuestion(newQuestion)\r\n            setHeaderText(newQuestion.instructions)\r\n            setOpenModal(\"question\")\r\n            setActiveCell(activeCell)\r\n        })\r\n    }\r\n    \r\n    function handleAnswerSubmit(playersAnswer) {\r\n        const answerIsCorrect = (Number(playersAnswer.trim()) === question.correctAnswer)\r\n        const answerFeedbackHeaderText = (answerIsCorrect ? chooseRandomFromArray(waysToSayCorrect) : `Nope. It was ${question.correctAnswer}.`)\r\n        setHeaderText(answerFeedbackHeaderText)\r\n\r\n        let moveToAdd = (answerIsCorrect) ? activeCell : -1\r\n        let updatedMoveList = moveList.concat(moveToAdd)\r\n        let updatedGameStatus = getGameStatus(updatedMoveList)\r\n        \r\n        console.log(`Adding ${moveToAdd} to the moveList. Game status: ${updatedGameStatus}`);\r\n        setTimeout(() => {\r\n            setOpenModal(\"none\")\r\n        }, 1500);\r\n        setTimeout(() => {\r\n            setMoveList(updatedMoveList)\r\n            setGameStatus(updatedGameStatus)\r\n            setActiveCell(null)\r\n        }, 1850)\r\n\r\n        // Handle Bot'sTurn\r\n        if (opponent === \"bot\" && !gameIsOver(updatedGameStatus)) {\r\n            let botMove = getBotMove(updatedMoveList)\r\n            let moveListAfterBot = updatedMoveList.concat(botMove)\r\n            let gameStatusAfterBot = getGameStatus(moveListAfterBot)\r\n            console.log(`Adding Bot Move: ${botMove} to the moveList. Game status: ${gameStatusAfterBot}`);\r\n            setTimeout(() => {\r\n                setMoveList(moveListAfterBot)\r\n                setGameStatus(gameStatusAfterBot)\r\n            }, 2200)\r\n        }\r\n        \r\n    }\r\n\r\n    function toggleCombine() {\r\n        setMathTopics(prev => { return { ...prev, combine: !prev.combine } })\r\n    }\r\n    function toggleMultiply() {\r\n        setMathTopics(prev => { return { ...prev, multiply: !prev.multiply } })\r\n    }\r\n    function selectOpponent(opponent) {\r\n        setOpponent(opponent)\r\n    }\r\n    function selectDifficulty(difficulty) {\r\n        setDifficultyMode(difficulty)\r\n    }\r\n\r\n    function determineDifficulty(score) {\r\n        console.log(`determineDifficulty called with ${score} `);\r\n        if (score < 7) {\r\n            return \"easy\"\r\n        }\r\n        else if (score < 14) {\r\n            return \"medium\"\r\n        }\r\n        else if (score >= 14) {\r\n            return \"hard\"\r\n        }\r\n        else {\r\n            console.error(`Invalid number of question right so far: ${score}`);\r\n            return \"error\"\r\n        }\r\n    }\r\n \r\n    function startNewGame(mathTopics, difficultyMode, opponent ) {\r\n        console.log(`STARTING NEW GAME with ...`);\r\n        console.log(`opponent: \"${opponent}\"`);\r\n        console.log(`mathTopics: \"${JSON.stringify(mathTopics, null, 4)}\", `);\r\n        console.log(`difficultyMode: \"${difficultyMode}\"`);\r\n\r\n        setMathTopics(mathTopics)\r\n        setDifficultyMode(difficultyMode)\r\n        setMoveList([])\r\n        setGameStatus('playerOnesTurn')\r\n        setOpenModal(\"none\")\r\n        setActiveCell(null)\r\n    }\r\n    function cancelNewGame() {\r\n        setOpenModal(\"none\")\r\n    }\r\n\r\n    function handleUndoClick() {\r\n        let shortenedMoveList = moveList.slice(0, -1)\r\n        setMoveList(shortenedMoveList)\r\n        setGameStatus(getGameStatus(shortenedMoveList))\r\n        setOpenModal(\"none\")\r\n    }\r\n\r\n    function openSettingsModal() {\r\n        setOpenModal(\"settings\")\r\n    }\r\n    function handleNewGameClick() {\r\n        setOpenModal(\"settings\")\r\n    }\r\n    function openInGameMenu() {\r\n        setOpenModal(\"menu\")\r\n    }\r\n\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <ThemeProvider theme={theme}>\r\n                <Box id='root'\r\n                    sx={{\r\n                        bgcolor: 'background',\r\n                        height: '100vh',\r\n                        width: '100vw',\r\n                        overflow: 'hidden',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'flex-start',\r\n                    }}\r\n                >\r\n                    {/* <WelcomePage /> */}\r\n                    {/* <PlayPage /> */}\r\n                    {/* <InfoPage /> */}\r\n                    <Box id='play-page' \r\n                        sx={{\r\n                            height:  boardSideLength,\r\n                            width:  boardSideLength,\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            alignItems: 'center',\r\n                            position: 'relative'\r\n                    }}>\r\n\r\n                        <WelcomeModal\r\n                            open={(openModal === \"welcome\")}\r\n                            openSettingsModal={openSettingsModal}\r\n                            boardSideLength={boardSideLength}\r\n                        />\r\n\r\n                        <InGameMenu\r\n                            open={(openModal === \"menu\")}\r\n                            openSettingsModal={openSettingsModal}\r\n                            openInGameMenu={openInGameMenu}\r\n                            handleNewGameClick={handleNewGameClick}\r\n                            handleUndoClick={handleUndoClick}\r\n                        />\r\n\r\n                        <SettingsModal \r\n                            open={(openModal === \"settings\")}\r\n                            startNewGame={startNewGame}\r\n                            cancelNewGame={cancelNewGame}\r\n                            boardSideLength={boardSideLength}\r\n\r\n                            opponent={opponent}\r\n                            mathTopics={mathTopics}\r\n                            difficultyMode={difficultyMode}\r\n\r\n                            toggleCombine={toggleCombine}\r\n                            toggleMultiply={toggleMultiply}\r\n                            selectOpponent={selectOpponent}\r\n                            selectDifficulty={selectDifficulty}\r\n\r\n                        />\r\n\r\n                        <MathQuestionModal\r\n                            open={(openModal === \"question\")}\r\n                            nextPlayerColor={nextPlayerColor(gameStatus)}\r\n                            gameStatus={gameStatus}\r\n                            question={question}\r\n                            headerText={headerText}\r\n                            handleAnswerSubmit={handleAnswerSubmit}\r\n                            boardSideLength={boardSideLength}\r\n                        />\r\n\r\n                        <GameBoard\r\n                            moveList={moveList}\r\n                            gameStatus={gameStatus}\r\n                            handleColumnClick={handleColumnClick}\r\n                        />\r\n                        \r\n                    </Box>\r\n                </Box>\r\n            </ThemeProvider>\r\n        </React.Fragment>\r\n    );\r\n}","import { useState, useEffect, useRef } from 'react'\r\n\r\n// Usage\r\n//\r\n// function App() {\r\n//     const [hoverRef, isHovered] = useHover();\r\n//     return <div ref={hoverRef}>{isHovered ? \"😁\" : \"☹️\"}</div>;\r\n// }\r\n// Hook\r\nexport function useHover() {\r\n    const [value, setValue] = useState(false);\r\n    const ref = useRef(null);\r\n    const handleMouseOver = () => setValue(true);\r\n    const handleMouseOut = () => setValue(false);\r\n    useEffect(\r\n        () => {\r\n            const node = ref.current;\r\n            if (node) {\r\n                node.addEventListener(\"mouseover\", handleMouseOver);\r\n                node.addEventListener(\"mouseout\", handleMouseOut);\r\n                return () => {\r\n                    node.removeEventListener(\"mouseover\", handleMouseOver);\r\n                    node.removeEventListener(\"mouseout\", handleMouseOut);\r\n                };\r\n            }\r\n        },\r\n        // [ref.current] // Recall only if ref changes\r\n    );\r\n    return [ref, value];\r\n}\r\n\r\nexport function useScreenHeight() {\r\n    const [screenHeight, setScreenHeight] = useState(window.innerHeight)\r\n\r\n    useEffect(() => {\r\n        const handleScreenSizeChange = () => setScreenHeight(window.innerHeight)\r\n        window.addEventListener('resize', handleScreenSizeChange)\r\n        return () => window.removeEventListener('resize', handleScreenSizeChange)\r\n    }, []);\r\n\r\n    return screenHeight;\r\n}\r\n\r\nexport function useScreenWidth() {\r\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth)\r\n\r\n    useEffect(() => {\r\n        const handleScreenSizeChange = () => setScreenWidth(window.innerWidth)\r\n        window.addEventListener('resize', handleScreenSizeChange)\r\n        return () => window.removeEventListener('resize', handleScreenSizeChange)\r\n    }, []);\r\n\r\n    return screenWidth;\r\n}\r\n\r\nexport function useScreenOrientation() {\r\n    const [orientation, setOrientation] = useState(window.screen.orientation.type)\r\n\r\n    useEffect(() => {\r\n        const handleOrientationChange = () => setOrientation(window.screen.orientation.type)\r\n        window.addEventListener('orientationchange', handleOrientationChange)\r\n        return () => window.removeEventListener('orientationchange', handleOrientationChange)\r\n    }, []);\r\n\r\n    return orientation;\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
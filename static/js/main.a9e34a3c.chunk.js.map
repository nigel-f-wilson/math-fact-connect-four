{"version":3,"sources":["navigation/SettingsStepper.js","navigation/NewGameButton.js","pages/Landing.js","logic/helpers.js","components/GameBoard.js","hooks.js","logic/maps.js","theme.js","pages/Play.js","App.js","reportWebVitals.js","index.js"],"names":["SettingsStepper","props","React","useState","activeStep","setActiveStep","Array","completedSteps","setCompletedSteps","playMode","setPlayMode","questionType","setQuestionType","goToNextStep","prevActiveStep","goBackOneStep","selectPlayMode","selection","concat","console","log","selectQuestionType","Box","sx","bgcolor","height","DialogContent","display","xs","sm","p","width","MobileSettingsStepper","mobileScreenSize","justifyContent","alignContent","steps","label","buttons","SetPlayModeButtons","SetQuestionTypeButtons","nextButton","NextButton","backButton","BackButton","startGameButton","StartGameButton","totalSteps","length","flexDirection","alignItems","Typography","variant","textAlign","mb","MobileStepper","position","Button","onClick","color","mt","mr","fontSize","disabled","includes","component","RouterLink","to","pathname","state","lineHeight","Fragment","startIcon","className","size","m","NewGameButton","dialogOpen","setDialogOpen","SettingsDialog","onClose","selectedValue","theme","useTheme","mobileDevice","useMediaQuery","breakpoints","down","Dialog","open","fullScreen","margin","Landing","Container","maxWidth","gutterBottom","py","gameIsOver","gameStatus","intersect","setOne","setTwo","filter","item","nextPlayerColor","squarePercentage","heightOfSixSquares","chipSizeRelativeToSquare","rowNumbers","columnNumbers","GameBoard","moveList","handleColumnClick","window","innerHeight","screenHeight","setScreenHeight","useEffect","handleScreenSizeChange","addEventListener","removeEventListener","useScreenHeight","innerWidth","screenWidth","setScreenWidth","useScreenWidth","squareSideLength","getColumnChipColors","columnIndex","chipColors","fill","forEach","cellId","turnNumber","player","boardChipColors","id","disableGutters","InfoHeaderRow","map","Column","index","RoundedBoardFrame","boxSizing","top","left","border","borderColor","borderRadius","borderTop","message","zIndex","Zoom","in","style","transitionDelay","align","lastMoveWasHere","backgroundColor","Chip","ColumnOfSquaresWithHoles","claimed","Slide","direction","SquareWithHole","overflow","boxShadow","lineToCellsMap","warn","Map","currentLineId","cell","cellsPerCol","isStartOfVerticalLine","line","verticalLineByStartCell","set","isStartOfHorizontalLine","horizontalLineByStartCell","upslashLineByStartCell","isStartOfDownslashLine","downslashLineByStartCell","entries","generateLineToCellsMap","numberOfLines","cellToLinesMap","lineId","get","prevLinesList","generateCellToLinesMap","getRowByCellId","isEndOfVerticalLine","Math","floor","createTheme","palette","primary","light","main","dark","contrastText","secondary","text","hint","action","disabledBackground","disabledOpacity","board","chip","playerOne","playerTwo","unclaimed","background","white","transparent","components","MuiPaper","styleOverrides","root","typography","button","fontWeight","status","shape","spacing","transitions","easing","bounce","parabolicAcceleration","responsiveFontSizes","Play","setMoveList","setGameStatus","setQuestionModalOpen","lenth","getColumnData","data","move","turn","getBoardData","claimStatus","lowestUnclaimedRow","indexOf","columnIsFull","lowestUnclaimedCell","moveToAdd","updatedMoveList","updatedGameStatus","lastPlayerToMove","lastPlayersNumbers","playerOnesNumbers","playerTwosNumbers","lastMoveMade","Number","slice","linesAffectedByLastMove","i","getGameStatus","App","CssBaseline","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9e34a3c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\n\r\n// MY components\r\n\r\n// MUI components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\n\r\n//  MUI Icons\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\n\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\n\r\n// SettingsDialog.propTypes = {\r\n//     onClose: PropTypes.func.isRequired,\r\n//     open: PropTypes.bool.isRequired,\r\n//     selectedValue: PropTypes.object.isRequired,\r\n// }\r\nexport function SettingsStepper(props) {\r\n    // const { onClose, selectedValue, dialogOpen } = props;\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [completedSteps, setCompletedSteps] = React.useState(new Array());\r\n\r\n    const [playMode, setPlayMode] = React.useState(\"unset\");\r\n    const [botDifficulty, setBotDifficulty] = React.useState(\"unset\");\r\n    // const [playWithTimeLimit, setPlayWithTimeLimit] = React.useState(false);  // only an option in human vs. human mod\r\n    const [questionType, setQuestionType] = React.useState(\"unset\");  // none | multiplication | division | exponents | algebra\r\n    const [rowNumbers, setRowNumbers] = React.useState([1, 2, 3, 4, 5, 6]);\r\n    const [colNumbers, setColNumbers] = React.useState([1, 2, 3, 4, 5, 6, 7]);\r\n\r\n    const goToNextStep = () => {  \r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    }\r\n    const goBackOneStep = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1)\r\n    }\r\n\r\n    const selectPlayMode = (selection) => {\r\n        setCompletedSteps(completedSteps.concat(0))\r\n        setPlayMode(selection)   // ENUM: 'human' | 'bot'\r\n        console.log(`PlayMode set to ${selection}`)\r\n    }\r\n    \r\n    // const selectMultiplication = () => {\r\n    //     setCompletedSteps(2)\r\n    //     setQuestionType('multiplication')\r\n    // }\r\n    // const selectDivision = () => {\r\n    //     setCompletedSteps(2)\r\n    //     setQuestionType('division')\r\n    // }\r\n    // const selectExponents = () => {\r\n    //     setCompletedSteps(2)\r\n    //     setQuestionType('exponents')\r\n    // }\r\n    // const selectAlgebra = () => {\r\n    //     setCompletedSteps(2)\r\n    //     setQuestionType('algebra')\r\n    // }\r\n    // const selectNone = () => {\r\n    //     setCompletedSteps(2)\r\n    //     setQuestionType('none')\r\n    // }\r\n    const selectQuestionType = (questionType) => {\r\n        setCompletedSteps(2)\r\n        setQuestionType(questionType)\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n        <Box sx={{ bgcolor: 'white', height: 'inherit' }}   >\r\n            <DialogContent sx={{ display: { xs: 'none', sm: 'block' }, p: '3 0 0' }} >\r\n                <Box sx={{ width: 550, p: 3 }}>\r\n                    <MobileSettingsStepper activeStep={activeStep} completedSteps={completedSteps} mobileScreenSize={false} />\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogContent sx={{ display: { xs: 'flex', sm: 'none' }, p: 0, height: 'inherit', justifyContent: 'center', alignContent: 'center' }}>\r\n                <MobileSettingsStepper activeStep={activeStep} completedSteps={completedSteps} mobileScreenSize={true} />\r\n            </DialogContent>\r\n        </Box>\r\n    );\r\n\r\n    \r\n\r\n    function MobileSettingsStepper(props) {\r\n        const { activeStep, completedSteps, mobileScreenSize } = props;\r\n\r\n        const steps = [\r\n            {\r\n                label: 'Play vs. Human or Bot?',\r\n                buttons: <SetPlayModeButtons />,\r\n            },\r\n            // {\r\n            //     label: 'How well should the Bot play?',\r\n            // },\r\n            // {\r\n            //     label: \"What are the players' names?\",\r\n            // },\r\n            {\r\n                label: 'What type of math questions should we ask?',\r\n                buttons: <SetQuestionTypeButtons />,\r\n\r\n            },\r\n            // {\r\n            //     label: 'What type of math questions should be asked?',\r\n            //     buttons: <Set\r\n            // },\r\n        ];\r\n        const maxSteps = steps.length;\r\n\r\n        \r\n        const nextButton = <NextButton\r\n            activeStep={activeStep}\r\n            completedSteps={completedSteps}\r\n            mobileScreenSize={mobileScreenSize}\r\n        />\r\n        \r\n        const backButton = <BackButton\r\n            // activeStep={activeStep}\r\n            // completedSteps={completedSteps}\r\n            mobileScreenSize={mobileScreenSize}\r\n        />\r\n\r\n        const startGameButton = <StartGameButton\r\n            activeStep={activeStep}\r\n            completedSteps={completedSteps}\r\n            mobileScreenSize={mobileScreenSize}\r\n            totalSteps={steps.length}\r\n        />\r\n\r\n        return (\r\n            <Box sx={{ height: '90%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                <Typography variant='h4' textAlign=\"center\" sx={{ mb: 4 }} >\r\n                    {steps[activeStep].label}\r\n                </Typography>\r\n                {/* <Typography variant='h4' textAlign=\"center\"   >\r\n                    {`Active: ${activeStep}`}\r\n                </Typography>\r\n                <Typography variant='h4' textAlign=\"center\"   >\r\n                    {`Completed: ${completedSteps}`}\r\n                </Typography> */}\r\n                {/* <Typography variant='h4' textAlign=\"center\"   >\r\n                    {`MobileScreenSize: ${mobileScreenSize}`}\r\n                </Typography>  */}\r\n\r\n                {steps[activeStep].buttons}\r\n\r\n\r\n\r\n                <MobileStepper\r\n                    activeStep={activeStep}\r\n                    variant=\"dots\"\r\n                    steps={steps.length}\r\n                    position={mobileScreenSize ? 'bottom' : 'static'}\r\n                    nextButton={activeStep === steps.length - 1 ? startGameButton : nextButton }\r\n                    backButton={backButton}\r\n                    sx={{ width: '100%' }}\r\n                >\r\n\r\n                </MobileStepper>\r\n\r\n            </Box>\r\n        )\r\n\r\n        \r\n        \r\n    }\r\n\r\n    function BackButton(props) {\r\n        let { activeStep, completedSteps, mobileScreenSize } = props\r\n\r\n        return (\r\n            <Button \r\n                // variant={mobileScreenSize ? 'text' : 'outlined'}\r\n                variant='text'\r\n                onClick={goBackOneStep}\r\n                sx={{ color: 'primary.main', mt: 1, mr: 1, fontSize: 'large' }}\r\n            >\r\n                <ArrowBackIosIcon fontSize='small' />&ensp;Back\r\n            </Button>\r\n        )\r\n    }\r\n    function NextButton(props) {\r\n        let { activeStep, completedSteps, mobileScreenSize } = props\r\n\r\n        let disabled = !completedSteps.includes(activeStep)\r\n        return (\r\n            <Button \r\n                // variant={mobileScreenSize ? 'text' : 'outlined'}\r\n                variant='text'\r\n                onClick={goToNextStep}\r\n                sx={{ mt: 1, mr: 1, fontSize: 'large' }}\r\n                disabled={disabled}\r\n            >\r\n                Next&ensp;<ArrowForwardIosIcon fontSize='small' />\r\n            </Button>\r\n        )\r\n    }\r\n    function StartGameButton(props) {\r\n        let { activeStep, completedSteps, mobileScreenSize, totalSteps } = props\r\n        let disabled = (completedSteps.length < totalSteps) \r\n\r\n        return (\r\n            <Button \r\n                // variant={mobileScreenSize ? 'text' : 'outlined'}\r\n                variant='text'\r\n                disabled={disabled}\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/play',\r\n                    state: {\r\n                        playMode: playMode,\r\n                        questionType: questionType,\r\n                    }\r\n                }}\r\n                sx={{ mt: 1, mr: 1, fontSize: 'large', lineHeight: 1 }}\r\n            >\r\n                Start<br />Game &ensp;<ArrowForwardIosIcon fontSize='small' />\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n    // Selection Buttons\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n    function SetPlayModeButtons(props) {\r\n        return (\r\n            <React.Fragment>\r\n                <Button\r\n                    onClick={() => selectPlayMode('human')}\r\n                    variant={playMode === 'human' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-user-friends\"></i>}\r\n                    size='large'\r\n                    sx={{ m: 2, width: '100%' }}\r\n                >\r\n                    &ensp;Play vs. Human\r\n                </Button>\r\n                <Button\r\n                    onClick={() => selectPlayMode('bot')}\r\n                    variant={playMode === 'bot' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className='fas fa-robot'></i>}\r\n                    sx={{ m: 2, width: '100%' }}\r\n                >\r\n                    &ensp;Play vs. Bot\r\n                </Button>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    function SetQuestionTypeButtons(props) {\r\n        // TODO ADD common IconButton reusable component to generate this set with .map instead of manually\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Button\r\n                    onClick={() => selectQuestionType('multiplication')}\r\n                    variant={questionType === 'multiplication' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-times\"></i>}\r\n                    sx={{ m: 1, width: '90%' }}\r\n                >\r\n                    &ensp;multiplication\r\n                </Button>\r\n                <Button\r\n                    onClick={() => selectQuestionType('division')}\r\n                    variant={questionType === 'division' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-divide\"></i>}\r\n                    sx={{ m: 1, width: '90%' }}\r\n                >\r\n                    &ensp;division\r\n                </Button>\r\n                <Button\r\n                    onClick={() => selectQuestionType('exponents')}\r\n                    variant={questionType === 'exponents' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-superscript\"></i>}\r\n                    sx={{ m: 1, width: '90%' }}\r\n                >\r\n                    &ensp;exponents\r\n                </Button>\r\n                <Button\r\n                    onClick={() => selectQuestionType('algebra')}\r\n                    variant={questionType === 'algebra' ? \"contained\" : \"outlined\"}\r\n                    // startIcon={<i class=\"fal fa-function\"></i>}\r\n                    startIcon={<i className=\"fas fa-calculator\"></i>}\r\n                    sx={{ m: 1, width: '90%' }}\r\n                >\r\n                    &ensp;algebra\r\n                </Button>\r\n                <Button\r\n                    onClick={() => selectQuestionType('none')}\r\n                    variant={questionType === 'none' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-ban\"></i>}\r\n                    sx={{ m: 1, width: '90%' }}\r\n                >\r\n                    &ensp;none\r\n                </Button>\r\n            </React.Fragment>\r\n\r\n        )\r\n\r\n\r\n        ///////////////////////////////////////////////////////////////////////////////////////\r\n        // Navigation Buttons\r\n        ///////////////////////////////////////////////////////////////////////////////////////    \r\n        function BackButton(props) {\r\n            return (\r\n                <Button variant=\"text\"\r\n                    onClick={goBackOneStep}\r\n                    sx={{ color: 'primary.main', mt: 1, mr: 1, fontSize: 'large' }}\r\n                >\r\n                    <ArrowBackIosIcon fontSize='small' />&ensp;Back\r\n                </Button>\r\n            )\r\n        }\r\n        function NextButton(props) {\r\n            return (\r\n                <Button variant=\"text\"\r\n                    onClick={goToNextStep}\r\n                    sx={{ mt: 1, mr: 1, fontSize: 'large' }}\r\n                    disabled={completedSteps < activeStep}\r\n                >\r\n                    Next&ensp;<ArrowForwardIosIcon fontSize='small' />\r\n                </Button>\r\n            )\r\n        }\r\n        function StartGameButton(props) {\r\n            return (\r\n                <Button variant=\"text\"\r\n                    disabled={completedSteps < activeStep + 1}\r\n                    component={RouterLink}\r\n                    to={{\r\n                        pathname: '/play',\r\n                        state: {\r\n                            playMode: playMode,\r\n                            questionType: questionType,\r\n                        }\r\n                    }}\r\n                    sx={{ mt: 1, mr: 1, fontSize: 'large', lineHeight: 1 }}\r\n                >\r\n                    Start<br />Game &ensp;<ArrowForwardIosIcon fontSize='small' />\r\n                </Button>\r\n            )\r\n        }\r\n\r\n        function SettingsStepperButton(props) {\r\n            return (\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={props.setStateFunction(props.setting)}\r\n                    sx={{ mt: 1, mr: 1 }}\r\n                >\r\n                    {props.startIcon}{props.label}\r\n                </Button>\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n        function SelectPlayModeStep(props) {\r\n            return (\r\n                <Step index={0} key={\"Select Human Or Bot\"}>\r\n                    <StepLabel>\r\n                        <Typography variant=\"body1\" >Select Human or Bot: </Typography>\r\n                        <Typography sx={{ fontWeight: 'bold' }} >{playMode.toUpperCase()}</Typography>\r\n                    </StepLabel>\r\n                    <StepContent>\r\n                        <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                            <SettingsStepperButton\r\n                                label=\"Play vs. Bot\"\r\n                                startIcon={\"<i class='fas fa-robot'></i>\"}\r\n                                onClick={() => {\r\n                                    setPlayMode(\"bot\")\r\n                                    goToNextStep()\r\n                                }}\r\n                            />\r\n                            <SettingsStepperButton\r\n                                label=\"Play vs. Human\"\r\n                                onClick={() => {\r\n                                    setPlayMode(\"human\")\r\n                                    goToNextStep()\r\n                                }}\r\n                            />\r\n                            {/* <BackButton disabled /> */}\r\n                        </Box>\r\n                    </StepContent>\r\n                </Step>\r\n            )\r\n        }\r\n\r\n        function SelectBotDifficultyStep(props) {\r\n            return (\r\n                <Step index={1}\r\n                    key={\"Select Bot Difficulty\"}\r\n                    disabled={(playMode === \"human\")}\r\n                >\r\n                    <StepLabel>\r\n                        <Typography variant=\"body1\" >Select Bot Difficulty: </Typography>\r\n                        <Typography sx={{ fontWeight: 'bold' }} >{botDifficulty.toUpperCase()}</Typography>\r\n                    </StepLabel>\r\n                    <StepContent>\r\n                        <Typography>\r\n\r\n                        </Typography>\r\n                        <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                            <SettingsStepperButton\r\n                                label=\"Easy\"\r\n                                onClick={() => {\r\n                                    setBotDifficulty(\"Easy\")\r\n                                    goToNextStep()\r\n                                }}\r\n                            />\r\n                            <SettingsStepperButton\r\n                                label=\"Medium\"\r\n                                onClick={() => {\r\n                                    setBotDifficulty(\"Medium\")\r\n                                    goToNextStep()\r\n                                }}\r\n                            />\r\n                            <SettingsStepperButton\r\n                                label=\"Hard\"\r\n                                onClick={() => {\r\n                                    setBotDifficulty(\"Hard\")\r\n                                    goToNextStep()\r\n                                }}\r\n                            />\r\n                            <BackButton />\r\n                        </Box>\r\n                    </StepContent>\r\n                </Step>\r\n            )\r\n        }\r\n\r\n\r\n        function SelectQuestionTypeStep(props) {\r\n            return (\r\n                <Step index={2} key={\"Select Type of Math Problem\"}>\r\n                    <StepLabel>\r\n                        <Typography variant=\"body1\" >Select Type of Math Problem: </Typography>\r\n                        <Typography variant=\"body1\" sx={{ fontWeight: 'bold' }} >{questionType.toUpperCase()}</Typography>\r\n                    </StepLabel>\r\n                    <StepContent>\r\n                        <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                            <SettingsStepperButton\r\n                                label=\"Multiplication\"\r\n                                onClick={() => {\r\n                                    setQuestionType(\"Multiplication\")\r\n                                    goToNextStep()\r\n                                }}\r\n                            />\r\n                            <SettingsStepperButton\r\n                                label=\"Division\"\r\n                                onClick={() => {\r\n                                    setQuestionType(\"Division\")\r\n                                    goToNextStep()\r\n                                }}\r\n                            />\r\n                            <SettingsStepperButton\r\n                                label=\"Exponents\"\r\n                                onClick={() => {\r\n                                    setQuestionType(\"Exponents\")\r\n                                    goToNextStep()\r\n                                }}\r\n                            />\r\n                            <SettingsStepperButton\r\n                                label=\"Algebra\"\r\n                                onClick={() => {\r\n                                    setQuestionType(\"Algebra\")\r\n                                    goToNextStep()\r\n                                }}\r\n                            />\r\n                            <SettingsStepperButton\r\n                                label=\"None\"\r\n                                onClick={() => {\r\n                                    setQuestionType(\"None\")\r\n                                    goToNextStep()\r\n                                }}\r\n                            />\r\n                            <BackButton />\r\n\r\n                        </Box>\r\n                    </StepContent>\r\n                </Step>\r\n            )\r\n        }\r\n\r\n\r\n        function EnterPlayerNamesStep(props) { }\r\n\r\n        function SetTimeLimitStep(props) { }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n// MY components\r\nimport { SettingsStepper } from \"./SettingsStepper\";\r\n// import { MobileSettingsStepper } from \"./MobileSettingsStepper\";\r\n// import { DesktopSettingsStepper } from \"./DesktopSettingsStepper\";\r\n\r\n// MUI components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\n// MUI icons\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default function NewGameButton() {\r\n    const [dialogOpen, setDialogOpen] = React.useState(false);\r\n    \r\n    \r\n    // const [selectedValue, setSelectedValue] = React.useState({\r\n    //     opponent: \"human\",\r\n    //     difficulty: \"hard\"\r\n    // });\r\n\r\n    const handleOpenDialog = () => { setDialogOpen(true) }\r\n    const handleCloseDialog = () => { setDialogOpen(false) }\r\n\r\n    return (\r\n        <React.Fragment >\r\n            <Button variant=\"contained\" onClick={handleOpenDialog}>\r\n                New Game\r\n            </Button>\r\n            <SettingsDialog\r\n                dialogOpen={dialogOpen}\r\n                onClose={handleCloseDialog}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n// SettingsDialog.propTypes = {\r\n//     onClose: PropTypes.func.isRequired,\r\n//     open: PropTypes.bool.isRequired,\r\n//     selectedValue: PropTypes.object.isRequired,\r\n// }\r\nfunction SettingsDialog(props) {\r\n    const { onClose, selectedValue, dialogOpen } = props;\r\n    const theme = useTheme()\r\n    const mobileDevice = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    \r\n\r\n    const handleListItemClick = (value) => {\r\n        onClose(value);\r\n    };\r\n\r\n    return (\r\n        <Box \r\n            sx={{ bgcolor: 'white' }}\r\n        >\r\n            <Dialog\r\n                onClose={onClose}\r\n                open={dialogOpen}\r\n                fullScreen={mobileDevice}\r\n            >\r\n                <CloseIcon\r\n                    sx={{ margin: '1rem 1rem 0 auto' }}\r\n                    onClick={() => onClose()}\r\n                />\r\n                <SettingsStepper />\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react'\r\n\r\n// MY components\r\nimport NewGameButton from \"../navigation/NewGameButton\";\r\n\r\n// MUI  components\r\nimport { Box, Typography, Container } from '@material-ui/core';\r\n\r\nexport default function Landing() {\r\n    return (\r\n        <Container maxWidth='md' sx={{ width: '100%', p: '1rem'}}>\r\n            <Typography color=\"text.primary\" variant=\"h2\" gutterBottom >\r\n                Welcome to Math Fact Connect Four!\r\n            </Typography>\r\n            <Typography color=\"text.primary\" variant=\"body1\" gutterBottom >\r\n                Practice foundational math facts while playing Connect Four! \r\n                Great for individual practice or for use with a whole class split into teams. \r\n                Simply select the column you'd like to drop a chip in and a math question will pop up. \r\n                Answer correctly and your move gets made as planned, \r\n                answer incorrectly and your turn is skipped. The first player (or team) to get four \r\n                consecutive chips in any row, column, or diagonal wins!\r\n            </Typography>\r\n            \r\n            <Box sx={{ display: 'flex', justifyContent: 'center', py: '1rem' }} >\r\n                <NewGameButton />\r\n            </Box>\r\n\r\n            <Typography color=\"text.primary\" variant=\"h4\" gutterBottom >\r\n                Thanks\r\n            </Typography>\r\n            <Typography color=\"text.primary\" variant=\"body1\" gutterBottom >\r\n                I want to thank my students at College Track, the Waldorf School of New Orleans, and Bricolage Academy\r\n                for inspiring me to create this game and helping me to test and improve it. This game was originally played\r\n                using laminated cards hung on the wall. My students enthusiasm for the game made me want to share it\r\n                with other teachers and classes but making sets of the cards and the grid to hang them from was quite time\r\n                consuming. I decided to remake this game as a free online app so it can reach as many kids as possible\r\n                and hopefully put a little bit of joy back into the practicing math foundations.\r\n            </Typography>\r\n            <Typography color=\"text.primary\" variant=\"body1\" gutterBottom >\r\n                The code for this project is open-source so if your are curious how it works behind the scenes just visit my GitHub page.\r\n                If you find a mistake or have an idea for how to improve this game, please open an issue.\r\n            </Typography>\r\n            <Typography color=\"text.primary\" variant=\"body1\" gutterBottom >\r\n                A production of the NOLA STEM Garden &copy;\r\n            </Typography>\r\n        </Container>\r\n    );\r\n}\r\n\r\n","export function gameIsOver(gameStatus) {\r\n    return (gameStatus === 'playerOneWins' || gameStatus === 'playerTwoWins' || gameStatus === 'gameDrawn')\r\n}\r\n\r\n// This function could be made more efficient through using sorted arrays and pointers that \r\n// enabled us to not re-scan the leading portion of setTwo when we know we are looking for a \r\n// higher number it only makes sense to look in higher indices. Besides that, early returns \r\n// could be added in case the lowest or highest numbers in setOne fall outside the range of \r\n// setTwo. This intersect is being made with setOne.length === 4 (cells in line) and a \r\n// potentially much longer setTwo (player's numbers)\r\nexport function intersect(setOne, setTwo) {\r\n    return setOne.filter(item => setTwo.includes(item))\r\n}\r\n\r\nexport function playerOnesNumbers(moveList) {\r\n    return moveList.filter((cell, turn) => turn % 2 === 0).filter(cell => cell !== -1)\r\n}\r\nexport function playerTwosNumbers(moveList) {\r\n    return moveList.filter((cell, turn) => turn % 2 === 1).filter(cell => cell !== -1)\r\n}\r\n\r\nexport function getBoardData(moveList) {\r\n    let data = new Array(42).fill(\"unclaimed\")\r\n    moveList.forEach((move, turn) => {\r\n        if (move !== -1) {\r\n            let player = turn % 2 === 0 ? \"playerOne\" : \"playerTwo\"\r\n            data[move] = player\r\n        }\r\n    })\r\n    return data\r\n}\r\n\r\nexport function nextPlayerColor(gameStatus) {\r\n    return gameIsOver(gameStatus) ? \"unclaimed\" : (gameStatus === \"playerOnesTurn\") ? \"playerOne\" : \"playerTwo\"\r\n}\r\n\r\n\r\nfunction getLastChipDropped(moveList) {\r\n    let ml = moveList.slice()\r\n    let lastCellId\r\n    do {\r\n        lastCellId = ml.pop()\r\n    } while (lastCellId === -1)\r\n    return lastCellId\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// Logic\r\nimport { gameIsOver, nextPlayerColor } from '../logic/helpers'\r\n// Custom Hooks\r\nimport { useScreenWidth, useScreenHeight } from \"../hooks\"\r\n\r\n// MUI  components\r\nimport { Box, Container, Switch, Paper, Slide, FormControlLabel, Typography, Zoom } from '@material-ui/core'\r\nimport { InfoPanel } from './InfoPanel';\r\n\r\n// Style & Layout Constants\r\nconst oneSixth = '16.666%'\r\nconst squarePercentage = '14.287%'\r\nconst rowHeightPercentage = '16.665%'\r\nconst columnWidthPercentage = '14.280%'\r\nconst headerHeightPercentage = columnWidthPercentage\r\nconst heightOfSixSquares = '85.714%'\r\n\r\nconst chipSizeRelativeToSquare = '84%'\r\n\r\nlet rowNumbers = [0, 1, 2, 3, 4, 5]\r\nlet columnNumbers = [0, 1, 2, 3, 4, 5, 6]\r\n\r\nexport function GameBoard(props) {\r\n    const { moveList, handleColumnClick, gameStatus } = props\r\n\r\n    const height = useScreenHeight()\r\n    const width = useScreenWidth()\r\n    const squareSideLength = (height <= width) ? height * 0.95 : width * 0.95\r\n\r\n    function getColumnChipColors(columnIndex) {\r\n        let chipColors = boardChipColors().filter((player, cellId) => cellId % 7 === columnIndex)\r\n        console.log(`CHIP COLORS for Column ${columnIndex}: ${chipColors}`)\r\n        return chipColors\r\n    }\r\n    function boardChipColors() {\r\n        let chipColors = new Array(42).fill('unclaimed')\r\n        moveList.forEach((cellId, turnNumber) => {\r\n            if (cellId !== -1) {              // -1 in moveList indicates a turn skipped due to wrong answer to math question\r\n                let player = (turnNumber % 2 === 0) ? \"playerOne\" : \"playerTwo\"  // Player One's moves are at Even indices in the moveList\r\n                chipColors[cellId] = player\r\n            }\r\n        })\r\n        // console.log(`Board Data: ${chipColors}`)\r\n        return chipColors\r\n    }\r\n    \r\n    return (\r\n        <Container id=\"gameBoard\"\r\n            disableGutters\r\n            sx={{\r\n                position: 'relative',\r\n                height: squareSideLength,\r\n                width: squareSideLength,\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'flex-end'\r\n            }}\r\n        >\r\n            <InfoHeaderRow gameStatus={gameStatus} />  \r\n\r\n            {columnNumbers.map((columnIndex) => {\r\n                let chipColors = getColumnChipColors(columnIndex)\r\n                console.log(`Column Chip Colors for column ${columnIndex}: ${chipColors}`)\r\n                return (\r\n                    <Column \r\n                        key={columnIndex}\r\n                        index={columnIndex}\r\n                        chipColors={chipColors}\r\n                        nextPlayerColor={nextPlayerColor(gameStatus)}\r\n                        handleColumnClick={handleColumnClick}\r\n                    />\r\n                )\r\n            })}\r\n            \r\n            <RoundedBoardFrame />\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction RoundedBoardFrame(props) {\r\n    return (\r\n        <Box id='roundedGameBorder'\r\n            sx={{\r\n                boxSizing: 'content-box',\r\n                position: 'absolute',\r\n                top: squarePercentage,\r\n                left: '-0.8rem',\r\n                width: '100%',\r\n                height: heightOfSixSquares,\r\n                border: \"0.8rem solid\",\r\n                borderColor: \"board.main\",\r\n                borderRadius: \"0.8rem\",\r\n                borderTop: 0\r\n            }}\r\n        />\r\n    )\r\n}\r\nfunction InfoHeaderRow(props) {\r\n    let { gameStatus } = props\r\n    let gameOver = gameIsOver(gameStatus)\r\n    let message = \"\"\r\n    if (gameOver) {\r\n        message = (gameStatus === \"playerOneWins\" ? \"Player One Wins!\" : \"Player Two Wins!\")\r\n    }\r\n    \r\n    return (\r\n        <Box id='infoHeaderRow'\r\n            sx={{\r\n                position: 'absolute',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: headerHeightPercentage,\r\n                zIndex: 15,\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n            }}\r\n        >\r\n            <Zoom in={message !== \"\"} style={{ transitionDelay: '300ms' }} >\r\n                <Typography variant='h2' align='center' >\r\n                    {message}\r\n                </Typography>\r\n            </Zoom>\r\n            \r\n            \r\n        </Box>\r\n    )\r\n}\r\n\r\nfunction Column(props) {\r\n    const { index, chipColors, lastMoveWasHere, nextPlayerColor, handleColumnClick } = props\r\n    // const [hoverRef, isHovered] = useHover()\r\n    // console.log(`You ${isHovered ? \"ARE\" : \"are NOT\"} hovering on column: ${columnId}`)\r\n\r\n    return (\r\n        <Box id=\"column\" \r\n            // ref={hoverRef} \r\n            onClick={() => handleColumnClick(index)}\r\n            sx={{\r\n                // border: 'solid red 1px',\r\n                position: 'relative',\r\n                // bgcolor: 'primary.main',\r\n                width: squarePercentage,\r\n                height: '100%',\r\n                zIndex: 9,\r\n                '&:hover #hoverChip': {\r\n                    // backgroundColor: `chip.playerOne`,\r\n                    backgroundColor: `chip.${nextPlayerColor}`,\r\n                },\r\n            }}\r\n        >\r\n            <Box id=\"hoverChipContainer\" \r\n                sx={{\r\n                    // bgcolor: 'primary.main',\r\n                    width: '100%',\r\n                    height: squarePercentage,\r\n                    zIndex: 8,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Box id=\"hoverChip\"\r\n                    sx={{\r\n                        bgcolor: 'background',\r\n                        width: chipSizeRelativeToSquare,\r\n                        height: chipSizeRelativeToSquare,\r\n                        borderRadius: '50%',\r\n                        zIndex: 8,\r\n                        \r\n                        \r\n                    }}\r\n                />\r\n            </Box>\r\n            <Box id=\"chipContainer\"\r\n                sx={{\r\n                    bgcolor: 'primary.main',\r\n                    width: '100%',\r\n                    // height: 'calc(6/7*100%)',\r\n                    height: '100%',\r\n                    // zIndex: 7,\r\n                    // display: 'flex',\r\n                    // flexDirection: 'column-reverse',\r\n                    // alignItems: 'center',\r\n                    // justifyContent: 'flex-start',\r\n                    position: 'absolute',\r\n                    top: squarePercentage,\r\n                    bgcolor: 'transparent',\r\n                    width: '100%',\r\n                    height: heightOfSixSquares,\r\n                    zIndex: 8,\r\n                    display: 'flex',\r\n                    flexDirection: 'column-reverse',\r\n                }}\r\n            >\r\n                {chipColors.map((color,index) => {\r\n                    return <Chip\r\n                        key={index}\r\n                        id={index}\r\n                        color={color}\r\n                        // transition={false}\r\n                    />\r\n                })}\r\n            </Box>\r\n            <ColumnOfSquaresWithHoles />\r\n\r\n        </Box>\r\n    );\r\n}\r\nColumn.propTypes = {\r\n    index: PropTypes.number.isRequired,\r\n    nextPlayerColor: PropTypes.oneOf(['playerOne', 'playerTwo', 'unclaimed']),\r\n    handleColumnClick: PropTypes.func,\r\n}\r\n\r\nfunction Chip(props) {\r\n    const { id, color } = props\r\n    let claimed = (color !== \"unclaimed\")\r\n    let bgcolor = `chip.${color}`\r\n\r\n    return (\r\n        <Slide in={claimed} \r\n            direction=\"down\"\r\n            // easing=\"easing.parabolicAcceleration\"\r\n            // easing={{ enter: 'transitions.easing.easeOut', exit: 'transitions.easing.sharp' }}\r\n        >\r\n            <Box id=\"transparentSquareFrame\"\r\n                sx={{\r\n                    width: '100%',\r\n                    height: rowHeightPercentage,\r\n                    // zIndex: 8,\r\n                    // zIndex: 'zIndex.chip',\r\n                    // zIndex: 'chip',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                }}\r\n            >\r\n                <Box id=\"chip\"\r\n                    sx={{\r\n                        borderRadius: '50%',\r\n                        // zIndex: 'zIndex.chip',\r\n                        zIndex: 'chip',\r\n                        bgcolor: bgcolor,\r\n                        width: chipSizeRelativeToSquare,\r\n                        height: chipSizeRelativeToSquare,\r\n                    }}\r\n                />\r\n            </Box>\r\n        </Slide>\r\n\r\n    )\r\n}\r\nColumn.propTypes = {\r\n    index: PropTypes.number.isRequired,\r\n    nextPlayerColor: PropTypes.oneOf(['playerOne', 'playerTwo', 'unclaimed']),\r\n    handleColumnClick: PropTypes.func,\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction ColumnOfSquaresWithHoles(props) {\r\n    function SquareWithHole(props) {\r\n        return (\r\n            <Box id=\"squareWithHole\"\r\n                key={props.index}\r\n                sx={{\r\n                    overflow: 'hidden',\r\n                    width: '100%',\r\n                    height: oneSixth,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                }}\r\n            >\r\n                <Box id=\"hole\"\r\n                    sx={{\r\n                        boxShadow: \"0 0 0 99px #0039cb\",\r\n                        borderRadius: '50%',\r\n                        bgcolor: 'transparent',\r\n                        width: chipSizeRelativeToSquare,\r\n                        height: chipSizeRelativeToSquare,\r\n                    }}\r\n                />\r\n            </Box>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <Box id=\"columnOfSquares\"\r\n            sx={{\r\n                position: 'absolute',\r\n                top: squarePercentage,\r\n                bgcolor: 'transparent',\r\n                width: '100%',\r\n                height: heightOfSixSquares,\r\n                zIndex: 'board',\r\n                display: 'flex',\r\n                flexDirection: 'column-reverse',\r\n            }}\r\n        >\r\n            {rowNumbers.map((item, index) => {\r\n                return (<SquareWithHole key={index} />)\r\n            })}\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n","import { useState, useEffect, useRef } from 'react'\r\n\r\n// Usage\r\n//\r\n// function App() {\r\n//     const [hoverRef, isHovered] = useHover();\r\n//     return <div ref={hoverRef}>{isHovered ? \"😁\" : \"☹️\"}</div>;\r\n// }\r\n// Hook\r\nexport function useHover() {\r\n    const [value, setValue] = useState(false);\r\n    const ref = useRef(null);\r\n    const handleMouseOver = () => setValue(true);\r\n    const handleMouseOut = () => setValue(false);\r\n    useEffect(\r\n        () => {\r\n            const node = ref.current;\r\n            if (node) {\r\n                node.addEventListener(\"mouseover\", handleMouseOver);\r\n                node.addEventListener(\"mouseout\", handleMouseOut);\r\n                return () => {\r\n                    node.removeEventListener(\"mouseover\", handleMouseOver);\r\n                    node.removeEventListener(\"mouseout\", handleMouseOut);\r\n                };\r\n            }\r\n        },\r\n        [ref.current] // Recall only if ref changes\r\n    );\r\n    return [ref, value];\r\n}\r\n\r\nexport function useScreenHeight() {\r\n    const [screenHeight, setScreenHeight] = useState(window.innerHeight)\r\n\r\n    useEffect(() => {\r\n        const handleScreenSizeChange = () => setScreenHeight(window.innerHeight)\r\n        window.addEventListener('resize', handleScreenSizeChange)\r\n        return () => window.removeEventListener('resize', handleScreenSizeChange)\r\n    }, []);\r\n\r\n    return screenHeight;\r\n}\r\n\r\nexport function useScreenWidth() {\r\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth)\r\n\r\n    useEffect(() => {\r\n        const handleScreenSizeChange = () => setScreenWidth(window.innerWidth)\r\n        window.addEventListener('resize', handleScreenSizeChange)\r\n        return () => window.removeEventListener('resize', handleScreenSizeChange)\r\n    }, []);\r\n\r\n    return screenWidth;\r\n}\r\n\r\nexport function useScreenOrientation() {\r\n    const [orientation, setOrientation] = useState(window.screen.orientation.type)\r\n\r\n    useEffect(() => {\r\n        const handleOrientationChange = () => setOrientation(window.screen.orientation.type)\r\n        window.addEventListener('orientationchange', handleOrientationChange)\r\n        return () => window.removeEventListener('orientationchange', handleOrientationChange)\r\n    }, []);\r\n\r\n    return orientation;\r\n}","// A \"line\" is a set of four cellIds that together form a win.\r\n// There are four 'types' of Line: 'vertical', 'horizontal', 'upslash', 'downslash'\r\n// There are 64 lines and 42 cells. \r\n// This module exports two high-level constants that map these two types of id to one another.\r\n// 1) lineIdToCellIdsMap  could be renamed \"cellsInLine\". It takes a lineId 0-63 and gives back the four cells in it.\r\n// 2) cellIdToLineIdsMap  could be renamed \"linesThatIncludeCell\". It takes a cellId 0-41 and gives back the 3 to 13 lines that cell is part of.\r\n\r\n// Low-level Constants\r\nconst cellsPerCol = 6;\r\nconst cellsPerRow = 7;\r\nconst totalCells = cellsPerCol * cellsPerRow;\r\nconst linesPerCol = (cellsPerCol >= 4) ? (cellsPerCol - 3) : 0;\r\nconst linesPerRow = (cellsPerRow >= 4) ? (cellsPerRow - 3) : 0;\r\nconst numberOfVerticalLines = linesPerCol * cellsPerRow;\r\nconst numberOfHorizontalLines = linesPerRow * cellsPerCol;\r\nconst numberOfUpslashLines = linesPerCol * linesPerRow;\r\nconst numberOfDownslashLines = linesPerCol * linesPerRow;\r\n\r\nexport const lineToCellsMap = generateLineToCellsMap()\r\nexport const numberOfLines = lineToCellsMap.size\r\n\r\nfunction generateLineToCellsMap() {\r\n    console.warn(`generateLineToCellsMap was called.  This compute heavy function should only run once per game.`)\r\n    let map = new Map()\r\n    let currentLineId = 0\r\n    for (let cell = 0; cell < totalCells; cell++) {\r\n        if (isStartOfVerticalLine(cell)) {\r\n            let line = verticalLineByStartCell(cell)\r\n            map.set(currentLineId++, line)\r\n        }\r\n        if (isStartOfHorizontalLine(cell)) {\r\n            let line = horizontalLineByStartCell(cell)\r\n            map.set(currentLineId++, line)\r\n        }\r\n        if (isStartOfUpslashLine(cell)) {\r\n            let line = upslashLineByStartCell(cell)\r\n            map.set(currentLineId++, line)\r\n        }\r\n        if (isStartOfDownslashLine(cell)) {\r\n            let line = downslashLineByStartCell(cell)\r\n            map.set(currentLineId++, line)\r\n        }\r\n    }\r\n    console.log(`Mapped each of the ${map.size} LineIds to the set of Cells in it.`)\r\n    console.log([...map.entries()])\r\n    return map\r\n}\r\nfunction verticalLineByStartCell(cellId) {\r\n    let line = [\r\n        cellId + (0 * cellsPerRow),\r\n        cellId + (1 * cellsPerRow),\r\n        cellId + (2 * cellsPerRow),\r\n        cellId + (3 * cellsPerRow)\r\n    ]\r\n    return line\r\n}\r\nfunction horizontalLineByStartCell(cellId) {\r\n    let line = [\r\n        cellId + 0,\r\n        cellId + 1,\r\n        cellId + 2,\r\n        cellId + 3\r\n    ]\r\n    return line\r\n}\r\nfunction upslashLineByStartCell(cellId) {\r\n    let line = [\r\n        cellId + (0 * cellsPerRow) + 0,\r\n        cellId + (1 * cellsPerRow) + 1,\r\n        cellId + (2 * cellsPerRow) + 2,\r\n        cellId + (3 * cellsPerRow) + 3\r\n    ]\r\n    return line\r\n}\r\nfunction downslashLineByStartCell(cellId) {\r\n    let line = [\r\n        cellId - (0 * cellsPerRow) + 0,\r\n        cellId - (1 * cellsPerRow) + 1,\r\n        cellId - (2 * cellsPerRow) + 2,\r\n        cellId - (3 * cellsPerRow) + 3\r\n    ]\r\n    return line\r\n}\r\n\r\n\r\nexport const cellToLinesMap = generateCellToLinesMap()\r\n\r\nfunction generateCellToLinesMap() {\r\n    console.warn(`cellToLinesMap was called.  This is a compute heavy function which should run once per game.`)\r\n    let cellToLinesMap = new Map()\r\n    for (let cell = 0; cell < totalCells; cell++) {\r\n        cellToLinesMap.set(cell, [])\r\n    }\r\n    for (let lineId = 0; lineId < numberOfLines; lineId++) {\r\n        let cellsInLine = lineToCellsMap.get(lineId)\r\n        cellsInLine.forEach(cell => {\r\n            let prevLinesList = cellToLinesMap.get(cell)\r\n            cellToLinesMap.set(cell, prevLinesList.concat(lineId))\r\n        })\r\n    }\r\n    console.log(`Mapped each of the ${totalCells} CellIds to the set of all Lines that include it.`)\r\n    console.log([...cellToLinesMap.entries()])\r\n\r\n    // cellsToLinesMap.forEach(logMapElement);\r\n    return cellToLinesMap\r\n}\r\n\r\n// FIRST level BOOLEAN LINE helpers             // Currently there is only a Cell.js functional Component, however if I defined a Cell Class I would think that I could turn these functions that take cellId as a parameter and turn them into something that 'reads better' like Cell.isStartOfVerticalLine() written on the Cell object so that it has built in access to the relevant cellId and can be used in a no-parameter fashion. ??? \r\nfunction isStartOfVerticalLine(cellId) {\r\n    const rowNumber = getRowByCellId(cellId)\r\n    return (cellsPerCol - rowNumber >= 4)\r\n}\r\nfunction isEndOfVerticalLine(cellId) {\r\n    const rowNumber = getRowByCellId(cellId)\r\n    return (rowNumber >= 3)\r\n}\r\nfunction isStartOfHorizontalLine(cellId) {\r\n    // If we are in the 0-th row then the minimum cellsPerCol that should return true is 4\r\n    const colNumber = getColByCellId(cellId)\r\n    return (cellsPerRow - colNumber >= 4)\r\n}\r\nfunction isStartOfUpslashLine(cellId) {\r\n    // A cell is the Start Of an Upslash Line IFF it is BOTH the \"start\" of a vertical line AND the \"start\" of a horizontal line.  \r\n    return (isStartOfVerticalLine(cellId) && isStartOfHorizontalLine(cellId));\r\n}\r\nfunction isStartOfDownslashLine(cellId) {\r\n    // A cell is the Start Of an Downslash Line IFF it is BOTH the \"end\" of a vertical line AND the \"start\" of a horizontal line.  \r\n    return (isEndOfVerticalLine(cellId) && isStartOfHorizontalLine(cellId));\r\n}\r\n\r\n// LOWEST LEVEL CELL-ROW-COL HELPERS\r\nfunction getRowByCellId(id) {\r\n    return (Math.floor(id / cellsPerRow))\r\n}\r\nfunction getColByCellId(id) {\r\n    return (id % cellsPerRow)\r\n}\r\nfunction getCellIdByRowCol(row, col) {\r\n    return (row * cellsPerRow + col);\r\n}\r\n\r\n","import {\r\n    createTheme,\r\n    responsiveFontSizes,\r\n} from '@material-ui/core/styles';\r\n\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#669944',\r\n            main: '#2e6b12',\r\n            dark: '#004000',\r\n            contrastText: '#FFFFFF'\r\n        },\r\n        secondary: {\r\n            light: '#FFFFF',\r\n            main: '#669944',\r\n            dark: '#777777',\r\n            contrastText: '#FFFFFF'\r\n        },\r\n        text: {\r\n            primary: 'rgba(0, 0, 0, 0.87)',\r\n            secondary: 'rgba(0, 0, 0, 0.54)',\r\n            disabled: 'rgba(0, 0, 0, 0.38)',\r\n            hint: 'rgba(0, 0, 0, 0.38)',\r\n        },\r\n        action: {\r\n            disabledBackground: '#2e6b12',\r\n            disabledOpacity: '0.5'\r\n        },\r\n        board: {\r\n            light: '#2962ff',\r\n            main: '#0039cb',\r\n            dark: '#001399',\r\n        },\r\n        chip: {\r\n            playerOne: '#d50000',\r\n            playerTwo: '#ffea00',\r\n            unclaimed: '#b3e5fc',\r\n        },\r\n        background: '#b3e5fc',\r\n        white: '#FFFFFF',\r\n        transparent: 'rgba(0, 0, 0, 0)',\r\n    },\r\n    components: {\r\n        MuiPaper: {\r\n            styleOverrides: {\r\n                // Name of the slot\r\n                root: {\r\n                    // Some CSS\r\n                    backgroundColor: '#fff',\r\n                },\r\n            },\r\n        },\r\n    },\r\n    typography: {\r\n        button: {\r\n            fontSize: '1.0rem',\r\n            fontWeight: '700'\r\n        }\r\n    },\r\n    status: {\r\n       \r\n    },\r\n    shape: {\r\n        borderRadius: 8,\r\n    },\r\n    spacing: 8,\r\n    transitions: {\r\n        easing: {\r\n            bounce: \"cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\r\n            parabolicAcceleration: \"cubic-bezier(0.5, 0.0, 1.0, 0.5)\"\r\n        }\r\n    },\r\n    zIndex: {\r\n        chip: 10,\r\n        board: 20\r\n    }\r\n\r\n});\r\n\r\nexport default responsiveFontSizes(theme)","import React from 'react'\r\nimport { useLocation } from \"react-router-dom\"\r\nimport PropTypes from 'prop-types'\r\n\r\n// MY UI components\r\nimport { GameBoard } from \"../components/GameBoard\";\r\nimport { InfoPanel } from \"../components/InfoPanel\";\r\n\r\n// MY Logical components\r\nimport { lineToCellsMap, cellToLinesMap } from '../logic/maps'   \r\nimport { intersect, gameIsOver, playerOnesNumbers, playerTwosNumbers, getBoardData } from '../logic/helpers'\r\n\r\n\r\n// MUI  components\r\nimport { Typography, Container, Box } from '@material-ui/core'\r\nimport theme from '../theme';\r\n\r\n\r\nexport default function Play(props) {\r\n    // const location = useLocation()\r\n    // const { playMode, questionType} = location.state\r\n    const playMode = \"human\"\r\n    const questionType = \"multiplication\"\r\n\r\n    const [moveList, setMoveList] = React.useState([])  // An Array of integers ranging -1 thru 41 of indeterminate length\r\n    const [gameStatus, setGameStatus] = React.useState('playerOnesTurn')\r\n    const [questionModalOpen, setQuestionModalOpen] = React.useState(false)\r\n    \r\n\r\n    let currentTurnNumber = moveList.lenth\r\n    \r\n    \r\n    // function getColumnData(columnIndex, boardData) {\r\n    //     let columnData = boardData.filter((claimStatus, cellId) => cellId % 7 === columnIndex)\r\n    // }\r\n    function getColumnData(columnIndex) {\r\n        let boardData = getBoardData(moveList)\r\n        return boardData.filter((claimStatus, cellId) => cellId % 7 === columnIndex)\r\n    }\r\n    \r\n    ///////////////////////////////////////////////////////\r\n    // CLICK HANDLERS\r\n    ///////////////////////////////////////////////////////\r\n    \r\n    \r\n    \r\n    function handleColumnClick(columnIndex) {\r\n        // Break into subroutines\r\n        // 1 Get Cell (and expand)\r\n        // 2 Generate Math Question\r\n        // 3 Call ____ to set var questionAnsweredCorrectly\r\n        // 4 \r\n        \r\n        \r\n        \r\n        // How do I make this \"await\"\r\n        \r\n        \r\n        let columnData = getColumnData(columnIndex)\r\n        let lowestUnclaimedRow = columnData.indexOf(\"unclaimed\")\r\n        let columnIsFull = (lowestUnclaimedRow === -1)\r\n        if (gameIsOver(gameStatus) || columnIsFull) {\r\n            console.log(`Returning Early from handleClick() since Game is already over OR column is full!`)\r\n            return -1\r\n        }\r\n        let lowestUnclaimedCell = lowestUnclaimedRow * 7 + columnIndex\r\n        console.log(`Cell where a move WOULD be made: ${lowestUnclaimedCell}`)\r\n\r\n        // This is where the Math Question Pop Up determines whether or not the move is made. \r\n        if (questionType !== \"none\") {\r\n            // Transition to Elevate and Expand Lowest Unclaimed Cell to center over the board\r\n            setQuestionModalOpen(true)\r\n\r\n\r\n        }\r\n        \r\n        let MATH_QUESTION_CORRECT = true\r\n        let PLAY_VS_BOT = false\r\n\r\n        let moveToAdd = MATH_QUESTION_CORRECT ? lowestUnclaimedCell : -1\r\n        let updatedMoveList = moveList.concat(moveToAdd)\r\n        let updatedGameStatus = getGameStatus(updatedMoveList)\r\n        setMoveList(updatedMoveList)\r\n        setGameStatus(updatedGameStatus)\r\n\r\n        if (PLAY_VS_BOT) {\r\n            // This is where we Would find and make the Computer Move if in Play vs. Computer Mode\r\n            // getBotMove\r\n        }\r\n        console.log(`updated moveList: ${updatedMoveList}`)\r\n        // console.log(`YOU CLICKED COLUMN: ${columnIndex} Data: ${columnData}`)\r\n        return 0;\r\n    }\r\n    function handleNewGameClick() {\r\n        setMoveList([])\r\n        setGameStatus('playerOnesTurn')\r\n        console.log(`NEW GAME !!!`)\r\n        return 0;\r\n    }\r\n    function handleUndoClick() {\r\n        setMoveList(moveList.slice(0, -1))\r\n        console.log(`UNDO !!!`)\r\n        return 0;\r\n    }\r\n\r\n    \r\n    // Returns ENUM: 'playerOnesTurn', 'playerTwosTurn', 'playerOneWins', 'playerTwoWins', 'gameOverDraw'\r\n    // This function efficiently checks to see if the last move created a win for the player who made it.\r\n    function getGameStatus(moveList) {\r\n        let lastPlayerToMove = (moveList.length % 2 === 1) ? \"playerOne\" : \"playerTwo\"\r\n        let lastPlayersNumbers = (lastPlayerToMove === \"playerOne\") ? playerOnesNumbers(moveList) : playerTwosNumbers(moveList) \r\n        let lastMoveMade = Number(lastPlayersNumbers.slice(-1) )\r\n        let linesAffectedByLastMove = cellToLinesMap.get(lastMoveMade)\r\n        for (let i = 0; i < linesAffectedByLastMove.length; i++) {\r\n            let line = linesAffectedByLastMove[i]\r\n            let cellsInLine = lineToCellsMap.get(line)\r\n            // For added efficiency I could at this point remove the lastMoveMade from cells in line and in the next line look for intersections of length 3.\r\n            if (intersect(cellsInLine, lastPlayersNumbers).length === 4) {\r\n                return (lastPlayerToMove === 'playerOne') ? 'playerOneWins' : 'playerTwoWins'\r\n            }\r\n        }\r\n        return (moveList.length % 2 === 0) ? 'playerOnesTurn' : 'playerTwosTurn'\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n        <Container \r\n            // maxWidth='lg' \r\n            // disableGutters \r\n            // sx={{ bgcolor: 'background',\r\n            //     // height: '100%',\r\n            //     display: 'flex',\r\n            //     flexDirection: 'column'\r\n            // }}\r\n        >\r\n\r\n            {/* ADD Math Question Popup */}\r\n\r\n            <GameBoard\r\n                moveList={moveList}\r\n                gameStatus={gameStatus}\r\n                handleColumnClick={handleColumnClick} \r\n            />\r\n            {/* <InfoPanel \r\n                gameStatus={gameStatus}\r\n                playMode={playMode}\r\n                questionType={questionType}\r\n                handleNewGameClick={handleNewGameClick}\r\n            /> */}\r\n\r\n        </Container>\r\n    );\r\n}","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    HashRouter as Router,\r\n    Route,\r\n    Switch\r\n} from \"react-router-dom\"\r\n\r\n\r\n// Custom Hooks\r\n// import { useScreenOrientation } from \"./hooks/useScreenOrientaton\"\r\n// import { useScreenWidth } from \"./hooks/useScreenWidth\"\r\n// import { useScreenHeight } from \"./hooks/useScreenHeight\"\r\n\r\nimport './App.css';\r\n\r\n// PAGES\r\nimport Landing from \"./pages/Landing\"\r\nimport Play from \"./pages/Play\"\r\n\r\n\r\n// MUI  components\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Box from '@material-ui/core/Box'\r\nimport Container from '@material-ui/core/Container'\r\n\r\n\r\n// THEMING\r\nimport theme from \"./theme\"\r\nimport {\r\n    // makeStyles,\r\n    ThemeProvider,\r\n} from '@material-ui/core/styles'\r\n\r\n\r\n\r\nexport default function App() {\r\n    \r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <ThemeProvider theme={theme}>\r\n            <Box sx={{\r\n                bgcolor: 'background',\r\n                height: '100vh',\r\n                width: '100vw',\r\n                overflow: 'scroll',\r\n                // overflow: 'hidden',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'start',\r\n            }}>\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path=\"/\">\r\n                            <Landing />\r\n                        </Route>\r\n                        <Route path=\"/play\" >\r\n                            <Play />\r\n                        </Route>\r\n\r\n\r\n                    </Switch>\r\n                </Router>\r\n            </Box>\r\n        </ThemeProvider>\r\n        </React.Fragment>\r\n    );\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
{"version":3,"sources":["navigation/MobileSettingsStepper.js","navigation/DesktopSettingsStepper.js","navigation/NewGameButton.js","pages/Landing.js","components/GameBoard.js","theme.js","pages/Play.js","App.js","reportWebVitals.js","index.js"],"names":["MobileSettingsStepper","props","React","useState","activeStep","setActiveStep","completedSteps","setCompletedSteps","playMode","setPlayMode","questionType","setQuestionType","steps","label","buttons","SetPlayModeButtons","SetQuestionTypeButtons","goToNextStep","prevActiveStep","goBackOneStep","selectHuman","console","log","selectBot","selectMultiplication","selectExponents","selectAlgebra","selectNone","Box","sx","height","display","flexDirection","justifyContent","alignItems","Typography","variant","textAlign","mb","MobileStepper","length","position","nextButton","StartGameButton","NextButton","backButton","BackButton","Fragment","Button","onClick","startIcon","className","size","m","width","selectQuestionType","color","mt","mr","fontSize","disabled","component","RouterLink","to","pathname","state","lineHeight","DesktopSettingsStepper","botDifficulty","setBotDifficulty","problemType","setProblemType","Stepper","orientation","SelectPlayModeStep","SelectBotDifficultyStep","SelectProblemTypeStep","Step","StepLabel","StepContent","index","fontWeight","toUpperCase","SettingsStepperButton","NewGameButton","dialogOpen","setDialogOpen","SettingsDialog","onClose","selectedValue","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","bgcolor","Dialog","open","margin","DialogContent","xs","md","p","Landing","Container","maxWidth","pt","gutterBottom","py","squarePercentage","GameBoard","boardData","moveList","Array","fill","forEach","squareId","turn","player","columnIndex","columnData","concat","boardDataFromMoveList","Column","data","Square","status","transparent","chipColor","Chip","borderRadius","createTheme","palette","primary","light","main","dark","contrastText","secondary","text","hint","action","disabledBackground","disabledOpacity","board","chip","playerOne","playerTwo","unclaimed","background","white","components","MuiPaper","styleOverrides","root","backgroundColor","typography","button","shape","spacing","responsiveFontSizes","Play","useLocation","disableGutters","App","CssBaseline","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34423e2d.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\n// MY components\r\n\r\n// MUI components\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\n//  MUI Icons\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\n\r\n\r\nexport function MobileSettingsStepper(props) {\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [completedSteps, setCompletedSteps] = React.useState(-1);\r\n\r\n    const [playMode, setPlayMode] = React.useState(\"\");\r\n    const [botDifficulty, setBotDifficulty] = React.useState(\"\");\r\n    // const [playWithTimeLimit, setPlayWithTimeLimit] = React.useState(false);  // only an option in human vs. human mod\r\n    const [questionType, setQuestionType] = React.useState(\"\");  // none | multiplication | division | exponents | algebra\r\n    const [rowNumbers, setRowNumbers] = React.useState([1, 2, 3, 4, 5, 6]);\r\n    const [colNumbers, setColNumbers] = React.useState([1, 2, 3, 4, 5, 6, 7]);\r\n\r\n\r\n    const steps = [\r\n        {\r\n            label: 'Play vs. Human or Bot?',\r\n            buttons: <SetPlayModeButtons/>,\r\n        },\r\n        // {\r\n        //     label: 'How well should the Bot play?',\r\n        // },\r\n        // {\r\n        //     label: \"What are the players' names?\",\r\n        // },\r\n        {\r\n            label: 'What type of math questions should we ask?',\r\n            buttons: <SetQuestionTypeButtons />,\r\n\r\n        },\r\n        // {\r\n        //     label: 'What type of math questions should be asked?',\r\n        //     buttons: <Set\r\n        // },\r\n    ];\r\n    const maxSteps = steps.length;\r\n\r\n\r\n    const goToNextStep = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    }\r\n    const goBackOneStep = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1)\r\n    }\r\n    const selectHuman = () => {\r\n        setCompletedSteps(0)\r\n        setPlayMode('human')\r\n        console.log(`PlayMode set to HUMAN`)\r\n    }\r\n    const selectBot = () => {\r\n        setCompletedSteps(0)\r\n        setPlayMode('bot');\r\n        console.log(`PlayMode set to BOT`)\r\n    }\r\n    const selectMultiplication = () => {\r\n        setCompletedSteps(1)\r\n        setQuestionType('multiplication')\r\n    }\r\n    const selectDivision = () => {\r\n        setCompletedSteps(1)\r\n        setQuestionType('division')\r\n    }\r\n    const selectExponents = () => {\r\n        setCompletedSteps(1)\r\n        setQuestionType('exponents')\r\n    }\r\n    const selectAlgebra = () => {\r\n        setCompletedSteps(1)\r\n        setQuestionType('algebra')\r\n    }\r\n    const selectNone = () => {\r\n        setCompletedSteps(1)\r\n        setQuestionType('none')\r\n    }\r\n    const selectQuestionType = (questionType) => {\r\n        setCompletedSteps(1)\r\n        setQuestionType(questionType)\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <Box sx={{ height: '90%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n            <Typography variant='h4' textAlign=\"center\" sx={{ mb: 6 }} >\r\n                {steps[activeStep].label}\r\n            </Typography>\r\n            <Typography variant='h4' textAlign=\"center\"   >\r\n                {`Active: ${activeStep}`}\r\n            </Typography>\r\n            <Typography variant='h4' textAlign=\"center\"   >\r\n                {`Completed: ${completedSteps}`}\r\n            </Typography>\r\n\r\n            {steps[activeStep].buttons}\r\n            \r\n            \r\n            \r\n            <MobileStepper \r\n                activeStep={activeStep}\r\n                variant=\"dots\"\r\n                steps={steps.length}\r\n                position=\"bottom\"\r\n                nextButton={activeStep === steps.length - 1 ? <StartGameButton /> : <NextButton />}\r\n                backButton={<BackButton />}\r\n                sx={{ }}\r\n            >\r\n                \r\n            </MobileStepper>\r\n\r\n        </Box>\r\n    )\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n    // Steps\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n    // Selection Buttons\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n    function SetPlayModeButtons(props) {\r\n        return (\r\n            <React.Fragment>\r\n                <Button\r\n                    onClick={selectHuman}\r\n                    variant={playMode === 'human' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-user-friends\"></i>}\r\n                    size='large'\r\n                    sx={{ m: 2, width: '60%'}}\r\n                >\r\n                    &ensp;Play vs. Human\r\n                </Button>\r\n                <Button\r\n                    onClick={selectBot}\r\n                    variant={playMode === 'bot' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className='fas fa-robot'></i>}\r\n                    sx={{ m: 2, width: '60%' }}\r\n\r\n                >\r\n                    &ensp;Play vs. Bot\r\n                </Button>\r\n            </React.Fragment>    \r\n\r\n        )\r\n    }\r\n\r\n    function SetQuestionTypeButtons(props) {\r\n        // TODO ADD common IconButton reusable component to generate this set with .map instead of manually\r\n        \r\n        return (\r\n            <React.Fragment>\r\n                <Button\r\n                    onClick={selectMultiplication}\r\n                    variant={questionType === 'multiplication' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-times\"></i>}\r\n                    sx={{ m: 2, width: '60%' }}\r\n                >\r\n                    &ensp;multiplication\r\n                </Button>\r\n                {/* <Button\r\n                    onClick={selectDivision}\r\n                    variant={questionType === 'division' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-divide\"></i>}\r\n                    sx={{ m: 2, width: '60%' }}\r\n                >\r\n                    &ensp;division\r\n                </Button> */}\r\n                <Button\r\n                    onClick={() => selectQuestionType('division')}\r\n                    variant={questionType === 'division' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-divide\"></i>}\r\n                    sx={{ m: 2, width: '60%' }}\r\n                >\r\n                    &ensp;division\r\n                </Button>\r\n                <Button\r\n                    onClick={selectExponents}\r\n                    variant={questionType === 'exponents' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-superscript\"></i>}\r\n                    sx={{ m: 2, width: '60%' }}\r\n                >\r\n                    &ensp;exponents\r\n                </Button>\r\n                <Button\r\n                    onClick={selectAlgebra}\r\n                    variant={questionType === 'algebra' ? \"contained\" : \"outlined\"}\r\n                    // startIcon={<i class=\"fal fa-function\"></i>}\r\n                    startIcon={<i className=\"fas fa-calculator\"></i>}\r\n                    sx={{ m: 2, width: '60%' }}\r\n                >\r\n                    &ensp;algebra\r\n                </Button>\r\n                <Button\r\n                    onClick={selectNone}\r\n                    variant={questionType === 'none' ? \"contained\" : \"outlined\"}\r\n                    startIcon={<i className=\"fas fa-ban\"></i>}\r\n                    sx={{ m: 2, width: '60%' }}\r\n                >\r\n                    &ensp;none\r\n                </Button>\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n    // Navigation Buttons\r\n    ///////////////////////////////////////////////////////////////////////////////////////    \r\n    function BackButton(props) {\r\n        return (\r\n            <Button variant=\"text\" \r\n                onClick={goBackOneStep}\r\n                sx={{ color: 'primary.main', mt: 1, mr: 1, fontSize: 'large' }}\r\n            >\r\n                <ArrowBackIosIcon fontSize='small' />&ensp;Back\r\n            </Button>\r\n        )\r\n    }\r\n    function NextButton(props) {\r\n        return (\r\n            <Button variant=\"text\"\r\n                onClick={goToNextStep}\r\n                sx={{ mt: 1, mr: 1 , fontSize: 'large' }}\r\n                disabled={completedSteps < activeStep}\r\n            >\r\n                Next&ensp;<ArrowForwardIosIcon fontSize='small' />\r\n            </Button>\r\n        )\r\n    }\r\n    function StartGameButton(props) {\r\n        return (\r\n            <Button variant=\"text\"\r\n                disabled={completedSteps < activeStep}\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/play',\r\n                    state: {\r\n                        playMode: playMode,\r\n                        questionType: questionType,\r\n                    }\r\n                }}\r\n                sx={{ mt: 1, mr: 1, fontSize: 'large', lineHeight: 1 }}\r\n            >\r\n                Start<br/>Game &ensp;<ArrowForwardIosIcon fontSize='small' />\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    function SettingsStepperButton(props) {\r\n        return (\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={props.setStateFunction(props.setting)}\r\n                sx={{ mt: 1, mr: 1 }}\r\n            >\r\n                {props.startIcon}{props.label}\r\n            </Button>\r\n        )\r\n    }\r\n    \r\n    \r\n\r\n\r\n    function SelectPlayModeStep(props) {\r\n        return (\r\n            <Step index={0} key={\"Select Human Or Bot\"}>\r\n                <StepLabel>\r\n                    <Typography variant=\"body1\" >Select Human or Bot: </Typography>\r\n                    <Typography sx={{ fontWeight: 'bold' }} >{playMode.toUpperCase()}</Typography>\r\n                </StepLabel>\r\n                <StepContent>\r\n                    <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                        <SettingsStepperButton\r\n                            label=\"Play vs. Bot\"\r\n                            startIcon={\"<i class='fas fa-robot'></i>\"}\r\n                            onClick={() => {\r\n                                setPlayMode(\"bot\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Play vs. Human\"\r\n                            onClick={() => {\r\n                                setPlayMode(\"human\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        {/* <BackButton disabled /> */}\r\n                    </Box>\r\n                </StepContent>\r\n            </Step>\r\n        )\r\n    }\r\n\r\n    function SelectBotDifficultyStep(props) {\r\n        return (\r\n            <Step index={1}\r\n                key={\"Select Bot Difficulty\"}\r\n                disabled={(playMode === \"human\")}\r\n            >\r\n                <StepLabel>\r\n                    <Typography variant=\"body1\" >Select Bot Difficulty: </Typography>\r\n                    <Typography sx={{ fontWeight: 'bold' }} >{botDifficulty.toUpperCase()}</Typography>\r\n                </StepLabel>\r\n                <StepContent>\r\n                    <Typography>\r\n\r\n                    </Typography>\r\n                    <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                        <SettingsStepperButton\r\n                            label=\"Easy\"\r\n                            onClick={() => {\r\n                                setBotDifficulty(\"Easy\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Medium\"\r\n                            onClick={() => {\r\n                                setBotDifficulty(\"Medium\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Hard\"\r\n                            onClick={() => {\r\n                                setBotDifficulty(\"Hard\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <BackButton />\r\n                    </Box>\r\n                </StepContent>\r\n            </Step>\r\n        )\r\n    }\r\n\r\n\r\n    function SelectQuestionTypeStep(props) {\r\n        return (\r\n            <Step index={2} key={\"Select Type of Math Problem\"}>\r\n                <StepLabel>\r\n                    <Typography variant=\"body1\" >Select Type of Math Problem: </Typography>\r\n                    <Typography variant=\"body1\" sx={{ fontWeight: 'bold' }} >{questionType.toUpperCase()}</Typography>\r\n                </StepLabel>\r\n                <StepContent>\r\n                    <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                        <SettingsStepperButton\r\n                            label=\"Multiplication\"\r\n                            onClick={() => {\r\n                                setQuestionType(\"Multiplication\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Division\"\r\n                            onClick={() => {\r\n                                setQuestionType(\"Division\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Exponents\"\r\n                            onClick={() => {\r\n                                setQuestionType(\"Exponents\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Algebra\"\r\n                            onClick={() => {\r\n                                setQuestionType(\"Algebra\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"None\"\r\n                            onClick={() => {\r\n                                setQuestionType(\"None\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <BackButton />\r\n\r\n                    </Box>\r\n                </StepContent>\r\n            </Step>\r\n        )\r\n    }\r\n\r\n    \r\n    function EnterPlayerNamesStep(props) {}\r\n\r\n    function SetTimeLimitStep(props) {}\r\n        \r\n\r\n\r\n    \r\n\r\n\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link as RouterLink } from \"react-router-dom\"\r\n\r\n// MY components\r\n\r\n// MUI components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\n\r\n\r\n\r\n// MUI icons\r\n\r\nexport function DesktopSettingsStepper(props) {\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [playMode, setPlayMode] = React.useState(\"\");\r\n    const [botDifficulty, setBotDifficulty] = React.useState(\"\");\r\n    // const [playWithTimeLimit, setPlayWithTimeLimit] = React.useState(false);  // only an option in human vs. human mod\r\n    const [problemType, setProblemType] = React.useState(\"none\");  // none | multiplication | division | exponents | algebra\r\n    const [rowNumbers, setRowNumbers] = React.useState([1, 2, 3, 4, 5, 6]);\r\n    const [colNumbers, setColNumbers] = React.useState([1, 2, 3, 4, 5, 6, 7]);\r\n\r\n\r\n\r\n    const goToNextStep = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n    const goBackOneStep = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    \r\n\r\n    return (\r\n        <Box sx={{ width: 550 }}>\r\n            <Stepper\r\n                activeStep={activeStep}\r\n                orientation=\"vertical\"\r\n            >\r\n                <SelectPlayModeStep />\r\n                <SelectBotDifficultyStep />\r\n                <SelectProblemTypeStep />\r\n                <Step key={\"Select Player Names\"}>\r\n                    <StepLabel>\r\n                        <Typography variant=\"caption\">Enter Player Names</Typography>\r\n                    </StepLabel>\r\n                    <StepContent>\r\n                        <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                            {/* Player 1 name entry */}\r\n                            {/* Player 2 name entry */}\r\n                            <StartGameButton />\r\n                            <BackButton />\r\n                        </Box>\r\n                    </StepContent>\r\n                </Step>\r\n            </Stepper>\r\n        </Box>\r\n    )\r\n\r\n    function SelectPlayModeStep(props) {\r\n        return (\r\n            <Step index={0} key={\"Select Human Or Bot\"}>\r\n                <StepLabel>\r\n                    <Typography variant=\"body1\" >Select Human or Bot: </Typography>\r\n                    <Typography sx={{ fontWeight: 'bold' }} >{playMode.toUpperCase()}</Typography>\r\n                </StepLabel>\r\n                <StepContent>\r\n                    <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                        <SettingsStepperButton\r\n                            label=\"Play vs. Bot\"\r\n                            onClick={() => {\r\n                                setPlayMode(\"bot\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Play vs. Human\"\r\n                            onClick={() => {\r\n                                setPlayMode(\"human\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        {/* <BackButton disabled /> */}\r\n                    </Box>\r\n                </StepContent>\r\n            </Step>\r\n        )\r\n    }\r\n\r\n    function SelectBotDifficultyStep(props) {\r\n        return (\r\n            <Step index={1}\r\n                key={\"Select Bot Difficulty\"}\r\n                disabled={(playMode === \"human\")}\r\n            >\r\n                <StepLabel>\r\n                    <Typography variant=\"body1\" >Select Bot Difficulty: </Typography>\r\n                    <Typography sx={{ fontWeight: 'bold' }} >{botDifficulty.toUpperCase()}</Typography>\r\n                </StepLabel>\r\n                <StepContent>\r\n                    <Typography>\r\n\r\n                    </Typography>\r\n                    <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                        <SettingsStepperButton\r\n                            label=\"Easy\"\r\n                            onClick={() => {\r\n                                setBotDifficulty(\"Easy\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Medium\"\r\n                            onClick={() => {\r\n                                setBotDifficulty(\"Medium\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Hard\"\r\n                            onClick={() => {\r\n                                setBotDifficulty(\"Hard\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <BackButton />\r\n                    </Box>\r\n                </StepContent>\r\n            </Step>\r\n        )\r\n    }\r\n\r\n\r\n    function SelectProblemTypeStep(props) {\r\n        return (\r\n            <Step index={2} key={\"Select Type of Math Problem\"}>\r\n                <StepLabel>\r\n                    <Typography variant=\"body1\" >Select Type of Math Problem: </Typography>\r\n                    <Typography variant=\"body1\" sx={{ fontWeight: 'bold' }} >{problemType.toUpperCase()}</Typography>\r\n                </StepLabel>\r\n                <StepContent>\r\n                    <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                        <SettingsStepperButton\r\n                            label=\"Multiplication\"\r\n                            onClick={() => {\r\n                                setProblemType(\"Multiplication\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Division\"\r\n                            onClick={() => {\r\n                                setProblemType(\"Division\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Exponents\"\r\n                            onClick={() => {\r\n                                setProblemType(\"Exponents\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Algebra\"\r\n                            onClick={() => {\r\n                                setProblemType(\"Algebra\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"None\"\r\n                            onClick={() => {\r\n                                setProblemType(\"None\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <BackButton />\r\n\r\n                    </Box>\r\n                </StepContent>\r\n            </Step>\r\n        )\r\n    }\r\n\r\n    function SetTimeLimitStep(props) {\r\n        return (\r\n            <Step index={2} key={\"Select Type of Math Problem\"}>\r\n                <StepLabel>\r\n                    <Typography variant=\"body1\" >Select Type of Math Problem: </Typography>\r\n                    <Typography variant=\"body1\" sx={{ fontWeight: 'bold' }} >{problemType.toUpperCase()}</Typography>\r\n                </StepLabel>\r\n                <StepContent>\r\n                    <Box sx={{ mb: 2 }} display='flex' flexDirection='column' >\r\n                        <SettingsStepperButton\r\n                            label=\"Multiplication\"\r\n                            onClick={() => {\r\n                                setProblemType(\"Multiplication\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Division\"\r\n                            onClick={() => {\r\n                                setProblemType(\"Division\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Exponents\"\r\n                            onClick={() => {\r\n                                setProblemType(\"Exponents\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"Algebra\"\r\n                            onClick={() => {\r\n                                setProblemType(\"Algebra\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <SettingsStepperButton\r\n                            label=\"None\"\r\n                            onClick={() => {\r\n                                setProblemType(\"None\")\r\n                                goToNextStep()\r\n                            }}\r\n                        />\r\n                        <BackButton />\r\n\r\n                    </Box>\r\n                </StepContent>\r\n            </Step>\r\n        )\r\n    }\r\n\r\n\r\n    function SettingsStepperButton(props) {\r\n        return (\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={props.onClick}\r\n                sx={{ mt: 1, mr: 1 }}\r\n            >\r\n                {props.label}\r\n            </Button>\r\n        )\r\n    }\r\n    function BackButton(props) {\r\n        return (\r\n            <Button\r\n                variant=\"outlined\"\r\n                disabled={props.disabled}\r\n                onClick={goBackOneStep}\r\n                sx={{ mt: 1, mr: 1 }}\r\n            >\r\n                Back\r\n            </Button>\r\n        )\r\n    }\r\n    function StartGameButton(props) {\r\n        return (\r\n            <SettingsStepperButton\r\n                label=\"Start Game!\"\r\n                component={RouterLink}\r\n                onClick={goBackOneStep}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n// MY components\r\nimport { MobileSettingsStepper } from \"./MobileSettingsStepper\";\r\nimport { DesktopSettingsStepper } from \"./DesktopSettingsStepper\";\r\n\r\n// MUI components\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\n// MUI icons\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default function NewGameButton() {\r\n    const [dialogOpen, setDialogOpen] = React.useState(false);\r\n    \r\n    \r\n    // const [selectedValue, setSelectedValue] = React.useState({\r\n    //     opponent: \"human\",\r\n    //     difficulty: \"hard\"\r\n    // });\r\n\r\n    const handleOpenDialog = () => { setDialogOpen(true) }\r\n    const handleCloseDialog = () => { setDialogOpen(false) }\r\n\r\n    return (\r\n        <React.Fragment >\r\n            <Button variant=\"contained\" onClick={handleOpenDialog}>\r\n                New Game\r\n            </Button>\r\n            <SettingsDialog\r\n                dialogOpen={dialogOpen}\r\n                onClose={handleCloseDialog}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n// SettingsDialog.propTypes = {\r\n//     onClose: PropTypes.func.isRequired,\r\n//     open: PropTypes.bool.isRequired,\r\n//     selectedValue: PropTypes.object.isRequired,\r\n// }\r\nfunction SettingsDialog(props) {\r\n    const { onClose, selectedValue, dialogOpen } = props;\r\n    const theme = useTheme()\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const mobileDevice = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    \r\n\r\n    const handleListItemClick = (value) => {\r\n        onClose(value);\r\n    };\r\n\r\n    return (\r\n        <Box \r\n            sx={{ bgcolor: 'white' }}\r\n        >\r\n            <Dialog\r\n                onClose={onClose}\r\n                open={dialogOpen}\r\n                fullScreen={fullScreen}\r\n            >\r\n                <CloseIcon\r\n                    sx={{ margin: '1rem 1rem 0 auto' }}\r\n                    onClick={() => onClose()}\r\n                />\r\n\r\n                {/* <DialogTitle sx={{ padding: '1rem' }}  >\r\n                    What kind of game do you want to play?\r\n                </DialogTitle> */}\r\n\r\n                <DialogContent sx={{ display: { xs: 'none', md: 'block' }, p: 0 }} >\r\n                    <DesktopSettingsStepper />\r\n                </DialogContent>\r\n                <DialogContent sx={{ display: { xs: 'block', md: 'none' }, p: 0 }}>\r\n                    <MobileSettingsStepper />\r\n                </DialogContent>\r\n                {/* <DialogContent sx={{ display: { xs: 'block' } }} >\r\n                    <DesktopSettingsStepper />\r\n                </DialogContent> */}\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {\r\n    Link as RouterLink,\r\n} from \"react-router-dom\"\r\n\r\n// MY components\r\nimport NewGameButton from \"../navigation/NewGameButton\";\r\n\r\n// MUI  components\r\nimport { Box } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Container } from '@material-ui/core'\r\n\r\nexport default function Landing() {\r\n\r\n    return (\r\n        <Container maxWidth=\"md\" sx={{ pt: '1rem' }}>\r\n            <Typography color=\"text.primary\" variant=\"h2\" gutterBottom >\r\n                Welcome to Math Fact Connect Four!\r\n            </Typography>\r\n            \r\n            <Typography color=\"text.primary\" variant=\"body1\" gutterBottom >\r\n                Play Classic Connect Four with a twist! Select the column you'd like to drop a chip in \r\n                and a math question will pop up. Answer correctly and your move goes through as planned, \r\n                answer incorrectly and you lose your turn. The first player (or team) to get four \r\n                consecutive chips in any row, column, or diagonal wins!\r\n            </Typography>\r\n            <Typography color=\"text.primary\" variant=\"body1\" gutterBottom >\r\n                This game can be used to practice multiplication and division facts, rules of exponents, \r\n                and basic algebra. You can play in human vs. human mode on a shared device or play against a bot.\r\n            </Typography>\r\n            \r\n            <Box sx={{ display: 'flex', justifyContent: 'center', py: '1rem' }} >\r\n                <NewGameButton />\r\n            </Box>\r\n\r\n            <Typography color=\"text.primary\" variant=\"body1\" gutterBottom >\r\n                I want to thank my students at College Track, the Waldorf School of New Orleans, and Bricolage Academy\r\n                for inspiring me to create this game and helping me to test and improve it. This game was originally played\r\n                using laminated cards hung on the wall. My students enthusiasm for the game made me want to share it\r\n                with other teachers and classes but making sets of the cards and the grid to hang them from was quite time\r\n                consuming. I decided to remake this game as a free online app so it can reach as many kids as possible\r\n                and hopefully put a little bit of joy back into the practicing math foundations.\r\n            </Typography>\r\n            <Typography color=\"text.primary\" variant=\"body1\" gutterBottom >\r\n                The code for this project is open-source so if your are curious how it works behind the scenes just visit my GitHub page.\r\n                If you find a mistake or have an idea for how to improve this game, please open an issue.\r\n            </Typography>\r\n            <Typography color=\"text.primary\" variant=\"body1\" gutterBottom >\r\n                A production of the NOLA STEM Garden &copy;\r\n            </Typography>\r\n        </Container>\r\n    );\r\n}\r\n\r\n","import React from 'react'\r\n\r\n// MUI  components\r\nimport { Box } from '@material-ui/core'\r\n\r\n// Style & Layout Constants\r\nconst squarePercentage = '14.287%'\r\nconst chipSizeRelativeToSquare = '84%'\r\n\r\nexport function GameBoard(props) {\r\n    // const moveList = props.moveList // An Array of integers ranging -1 thru 41 of indeterminate length\r\n    const moveList = [-1, 1,2,3,4,5,-1,-1,6,-1,8,9,-1,10,-1,11,-1,12] // Testing Only\r\n    \r\n    let boardData = boardDataFromMoveList(moveList)\r\n    \r\n    return (\r\n            <Box sx={{ display: 'flex', flexDirection: 'row', height: '375px' }} >\r\n                <Column data={boardData[0]} />\r\n                <Column data={boardData[1]} />\r\n                <Column data={boardData[2]} />\r\n                <Column data={boardData[3]} />\r\n                <Column data={boardData[4]} />\r\n                <Column data={boardData[5]} />\r\n                <Column data={boardData[6]} />\r\n            </Box>\r\n    );\r\n}\r\n\r\n\r\n\r\nfunction Column(props) {\r\n    return (\r\n        <Box sx={{ \r\n            bgcolor: 'background', \r\n            width: squarePercentage,\r\n            height: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column-reverse'\r\n            }} \r\n            \r\n        >\r\n            {/* {\r\n                props.data.map(squareStatus => {\r\n                    <Square status={squareStatus} />\r\n                })\r\n            } */}\r\n            <Square status={props.data[0]} />\r\n            <Square status={props.data[1]} />\r\n            <Square status={props.data[2]} />\r\n            <Square status={props.data[3]} />\r\n            <Square status={props.data[4]} />\r\n            <Square status={props.data[5]} />\r\n            <Square transparent ></Square>\r\n\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nfunction Square(props) {\r\n    let bgcolor = props.transparent ? 'background' : 'board.main'\r\n    let chipColor = props.status ? props.status : 'unclaimed'\r\n    \r\n    return (\r\n        <Box sx={{ \r\n            bgcolor: bgcolor,\r\n            height: squarePercentage,\r\n            width: '100%',\r\n            display: 'flex', \r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n\r\n            }} \r\n        >\r\n            <Chip color={chipColor} />\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\n// Having a Chip be a separate component with a lower Z-index than the Square\r\n// should make adding a sliding transition animation easier. \r\nfunction Chip(props) {\r\n    let bgcolor = `chip.${props.color}`\r\n\r\n    return (\r\n        <Box sx={{\r\n            bgcolor: bgcolor,\r\n            height: chipSizeRelativeToSquare,\r\n            width: chipSizeRelativeToSquare,\r\n            borderRadius: '50%'\r\n        }}\r\n        >\r\n\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nfunction boardDataFromMoveList(moveList) {\r\n    let boardData = Array(7).fill([])\r\n    moveList.forEach((squareId, turn) => {\r\n        if (squareId !== -1) {              // -1 in moveList indicates a turn skipped due to wrong answer to math question\r\n            let player = (turn % 2 === 0) ? \"playerOne\" : \"playerTwo\"  // Player One's moves are at Even indices in the moveList\r\n            let columnIndex = squareId % 7\r\n            let columnData = boardData[columnIndex]\r\n            boardData[columnIndex] = columnData.concat(player)\r\n        }\r\n    })\r\n    return boardData\r\n}","import {\r\n    createTheme,\r\n    responsiveFontSizes,\r\n} from '@material-ui/core/styles';\r\n\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#669944',\r\n            main: '#2e6b12',\r\n            dark: '#004000',\r\n            contrastText: '#FFFFFF'\r\n        },\r\n        secondary: {\r\n            light: '#FFFFF',\r\n            main: '#669944',\r\n            dark: '#777777',\r\n            contrastText: '#FFFFFF'\r\n        },\r\n        text: {\r\n            primary: 'rgba(0, 0, 0, 0.87)',\r\n            secondary: 'rgba(0, 0, 0, 0.54)',\r\n            disabled: 'rgba(0, 0, 0, 0.38)',\r\n            hint: 'rgba(0, 0, 0, 0.38)',\r\n        },\r\n        action: {\r\n            disabledBackground: '#2e6b12',\r\n            disabledOpacity: '0.5'\r\n        },\r\n        board: {\r\n            light: '#2962ff',\r\n            main: '#0039cb',\r\n            dark: '#001399',\r\n        },\r\n        chip: {\r\n            playerOne: '#d50000',\r\n            playerTwo: '#ffea00',\r\n            unclaimed: '#ffffff',\r\n        },\r\n        background: '#b3e5fc',\r\n        white: '#FFFFFF',\r\n    },\r\n    components: {\r\n        MuiPaper: {\r\n            styleOverrides: {\r\n                // Name of the slot\r\n                root: {\r\n                    // Some CSS\r\n                    backgroundColor: '#fff',\r\n                },\r\n            },\r\n        },\r\n    },\r\n    typography: {\r\n        button: {\r\n            fontSize: '1.0rem',\r\n            fontWeight: '700'\r\n        }\r\n    },\r\n    status: {\r\n       \r\n    },\r\n    shape: {\r\n        borderRadius: 8,\r\n    },\r\n    spacing: 8,\r\n\r\n});\r\n\r\nexport default responsiveFontSizes(theme)","import React from 'react'\r\nimport {\r\n    Link as RouterLink,\r\n    useLocation,\r\n} from \"react-router-dom\"\r\n\r\n// MY components\r\nimport { GameBoard } from \"../components/GameBoard\";\r\n\r\n// MUI  components\r\nimport { Typography, Container, Box } from '@material-ui/core'\r\nimport theme from '../theme';\r\n\r\n\r\nexport default function Play(props) {\r\n    const location = useLocation()\r\n    \r\n    const { playMode, questionType} = location.state\r\n\r\n    const [moveList, setMoveList] = React.useState([]);\r\n\r\n    \r\n    \r\n    return (\r\n        <Container maxWidth='sm' sx={{ bgcolor: 'background'}} disableGutters >\r\n            <GameBoard \r\n                moveList={moveList}\r\n            />\r\n        </Container>\r\n\r\n        \r\n\r\n    );\r\n}","import React from 'react'\r\nimport {\r\n    HashRouter as Router,\r\n    Route,\r\n    Switch\r\n} from \"react-router-dom\"\r\n\r\nimport './App.css';\r\n\r\n// PAGES\r\nimport Landing from \"./pages/Landing\"\r\nimport Play from \"./pages/Play\"\r\n\r\n\r\n// MUI  components\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Box from '@material-ui/core/Box'\r\nimport Container from '@material-ui/core/Container'\r\n\r\n\r\n// THEMING\r\nimport theme from \"./theme\"\r\nimport {\r\n    // makeStyles,\r\n    ThemeProvider,\r\n} from '@material-ui/core/styles'\r\n\r\n\r\n\r\nexport default function App() {\r\n    // const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <ThemeProvider theme={theme}>\r\n            <Box sx={{\r\n                bgcolor: 'background',\r\n                height: '100vh',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'flexStart',\r\n            }}>\r\n                <Container maxWidth='sm' disableGutters >\r\n                    <Router>\r\n                        <Switch>\r\n                            <Route exact path=\"/\">\r\n                                <Landing />\r\n                            </Route>\r\n                            <Route path=\"/play\" >\r\n                                <Play />\r\n                            </Route>\r\n\r\n\r\n                        </Switch>\r\n                    </Router>\r\n                </Container>\r\n            </Box>\r\n        </ThemeProvider>\r\n        </React.Fragment>\r\n    );\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}